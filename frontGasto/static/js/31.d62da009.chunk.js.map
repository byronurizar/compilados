{"version":3,"sources":["App/components/base/GastoListar.js","App/components/base/GastoUpSert.js","App/components/base/ControlGastoHome.js","App/pages/ControlGastoHomePage.js"],"names":["GastoListar","setshowListGasto","listGastos","setListGastos","handleEditar","listCategorias","listSubCategorias","setLoading","useForm","fechaFinal","fechaInicial","useState","upSert","Row","Col","Table","responsive","hover","borderless","style","textAlign","map","item","index","key","gastoId","categoria","subcategora","descripcion","monto","fecha_crea","href","onClick","className","id","withReactContent","Swal","fire","title","text","type","showCloseButton","showCancelButton","then","willDelete","a","value","callApi","method","response","alert_exitoso","listActual","filter","alert_warning","GastoUpSert","dataInicial","setRefreshData","abrirModal","setAbrirModal","GetCategorias","values","handleOnChange","listSubCategoriasOfCategory","setListSubCategoriasOfCategory","existSubCategorys","setExistSubCategorys","loading","NuevoRegistro","body","JSON","stringify","uuidv4","ActualizarRegistro","handleOnSubmit","e","preventDefault","useEffect","categoriaId","items","i","Number","length","target","name","errorMessage","Modal","show","onHide","Loading","Header","closeButton","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","Form","Group","md","Label","htmlFor","required","onChange","nombre","sub_categoriaId","placeholder","autoComplete","textTransform","estadoId","ControlGastoHome","refreshData","listPresupuesto","setListPresupuesto","gasto","presupuesto","totalGastoPresupuesto","setTotalGastoPresupuesto","listDistintasCategorias","setListDistintasCategorias","listUnificacionGastosPresupuesto","setListUnificacionGastosPresupuesto","showListGasto","setListCategorias","setListSubCategorias","initData","moment","Date","getFullYear","getMonth","format","add","setdataInicial","GetCategoria","GetSubCategoria","GetListGasto","array","newList","find","push","Distintos","unificacion","totalGastos","totalPresupuesto","toFixed","handleFiltrar","gastos","auxGasto","mesId","anioId","xl","Card","Button","variant","size","texto","ItemPresupestoGasto","porcentaje","setPorcentaje","color","setColor","listColor","aux","isFinite","ProgressBar","now","GraficaGastosPorCategoria","listLabes","setListLabes","listValue","setListValue","listAuxCategoria","listAuxMonto","String","height","options","colors","legend","position","labels","plotOptions","pie","donut","tooltip","y","formatter","val","parseFloat","dataLabels","enabled","dropShadow","breakpoint","chart","width","series","GraficaPresupuestoVrsGasto","listMesesAnios","setlistMesesAnios","listGastoPresupuestoMesAnio","setlistGastoPresupuestoMesAnio","listLabelsGrafica","setListLabelsGrafica","listGastosGrafica","setListGastosGrafica","listPresupuestoGrafica","setListPresupuestoGrafica","listMesesAniosAux","mesIdInicio","anioIdInicio","mesIdFin","anioIdFin","anio","mesFinAux","mesInicioAux","mes","list","listGastosMesAnio","listPresupuestoMesAnio","parseInt","reduce","b","console","log","gastoList","presupuestoList","substring","data3","stroke","xaxis","yaxis","opposite","data","ControlGastoHomePage"],"mappings":"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","file":"static/js/31.d62da009.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Table } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const GastoListar = ({ setshowListGasto, listGastos = [], setListGastos, listCategorias, listSubCategorias, handleEditar, setLoading }) => {\r\n  const [values, handleOnChange] = useForm({\r\n    fechaFinal: '',\r\n    fechaInicial: ''\r\n  });\r\n\r\n  const [upSert, setUpSert] = useState(false);\r\n  const [abrirModal, setAbrirModal] = useState(false);\r\n\r\n  const handleDelete = (id) => {\r\n    const MySwal = withReactContent(Swal);\r\n    MySwal.fire({\r\n      title: 'Alerta?',\r\n      text: 'Esta seguro que desea eliminar el elemento',\r\n      type: 'warning',\r\n      showCloseButton: true,\r\n      showCancelButton: true\r\n    }).then(async (willDelete) => {\r\n      if (willDelete.value) {\r\n        setLoading(true);\r\n        let method = 'DELETE';\r\n        let response = await callApi(`ctl/gasto/${id}`, {\r\n          method\r\n        });\r\n        if (response) {\r\n          alert_exitoso(response);\r\n          let listActual = listGastos.filter(item => item.gastoId !== id);\r\n          setListGastos(listActual);\r\n        }\r\n        //  setRefreshData(true);\r\n        setLoading(false);\r\n      } else {\r\n        alert_warning('No se eliminó ningún elemento');\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !upSert ?\r\n          <Aux>\r\n            <Row>\r\n              <Col>\r\n\r\n                <Table responsive hover borderless>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>No.</th>\r\n                      <th>Categoría</th>\r\n                      <th>Sub-Categoría</th>\r\n                      <th>Descripción</th>\r\n                      <th style={{ textAlign: \"center\" }}>Monto</th>\r\n                      <th style={{ textAlign: \"center\" }}>Fecha</th>\r\n                      <th style={{ textAlign: \"center\" }}>Opciones</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      listGastos && listGastos.map((item, index) => {\r\n                        return (\r\n                          <tr key={`gastoId${item.gastoId}`}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{item?.categoria}</td>\r\n                            <td>{item?.subcategora}</td>\r\n                            <td>{item?.descripcion}</td>\r\n                            <td style={{ textAlign: \"center\" }}>Q{item.monto}</td>\r\n                            <td style={{ textAlign: \"center\" }}>{item?.fecha_crea}</td>\r\n                            <td style={{ textAlign: \"center\" }}>\r\n                              <a href={\"#\"} onClick={() => { handleEditar(item.gastoId) }}><i className=\"icon feather icon-edit f-w-600 f-16 m-r-15 text-c-green\" /></a>\r\n                              <a href={\"#\"} onClick={() => { handleDelete(item.gastoId) }}><i className=\"feather icon-trash-2 f-w-600 f-16 text-c-red\" /></a>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </Table>\r\n\r\n              </Col>\r\n            </Row>\r\n          </Aux>\r\n          : <></>\r\n\r\n      }\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nexport const GastoUpSert = ({ dataInicial, setRefreshData,abrirModal, setAbrirModal, GetCategorias, listCategorias, listSubCategorias }) => {\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const [listSubCategoriasOfCategory, setListSubCategoriasOfCategory] = useState([]);\r\n    const [existSubCategorys, setExistSubCategorys] = useState(false);\r\n    const [loading, setLoading] = useState(false)\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('ctl/gasto', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            setRefreshData(uuidv4());\r\n            alert_exitoso(\"Gasto agregado exitosamente\");\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('ctl/gasto', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            setRefreshData(uuidv4());\r\n            alert_exitoso(response);\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.gastoId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n    useEffect(() => {\r\n        if (values.categoriaId) {\r\n            let items = listSubCategorias.filter(i => Number(i.categoriaId) === Number(values.categoriaId));\r\n            if(items.length>0){\r\n                setExistSubCategorys(true);\r\n                setListSubCategoriasOfCategory(items);\r\n            }else{\r\n                setExistSubCategorys(false);\r\n                 handleOnChange({\r\n                    target: {\r\n                        name:'sub_categoriaId',\r\n                        value:'0'\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [values.categoriaId])\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)}>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.gastoId > 0 ? 'Actualizar Gasto' : 'Nuevo Gasto'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                   \r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"categoriaId\">Categoría</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"categoriaId\"\r\n                                            id=\"categoriaId\"\r\n                                            required\r\n                                            onChange={handleOnChange}\r\n                                            value={values.categoriaId}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">--Seleccione--</option>\r\n                                            {\r\n                                                listCategorias.map(({ categoriaId, nombre }) => (\r\n                                                    <option value={categoriaId} key={categoriaId}>{nombre}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    {\r\n                                        existSubCategorys===true &&\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"sub_categoriaId\">Sub-Categoría</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"sub_categoriaId\"\r\n                                            id=\"sub_categoriaId\"\r\n                                            required\r\n                                            onChange={handleOnChange}\r\n                                            value={values.sub_categoriaId}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">--Seleccione--</option>\r\n                                            {\r\n                                                listSubCategoriasOfCategory.map(({ sub_categoriaId, nombre }) => (\r\n                                                    <option value={sub_categoriaId} key={sub_categoriaId}>{nombre}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n}\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"monto\">Monto</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"monto\"\r\n                                            id=\"monto\"\r\n                                            required\r\n                                            value={values.monto}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Monto\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Descripción</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"descripcion\"\r\n                                            id=\"descripcion\"\r\n                                            value={values.descripcion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"descripcion\"\r\n                                            autoComplete=\"off\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.gastoId === 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                </Form.Row>\r\n                                <Form.Row className=\"align-items-center m-l-0\">\r\n                                    <Col />\r\n                                    <Col />\r\n                                    <Col className=\"text-right\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </Col>\r\n                                    <Col className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.gastoId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import moment from 'moment'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Card, Col, Row, ProgressBar, Button } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport Chart from \"react-apexcharts\";\r\nimport { GastoListar } from './GastoListar';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { GastoUpSert } from './GastoUpSert';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nexport const ControlGastoHome = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [refreshData, setRefreshData] = useState(uuidv4());\r\n  const [listGastos, setListGastos] = useState([]);\r\n  const [listPresupuesto, setListPresupuesto] = useState([]);\r\n  const [totalGastoPresupuesto, setTotalGastoPresupuesto] = useState({\r\n    gasto: 0,\r\n    presupuesto: 0\r\n  });\r\n  const [listDistintasCategorias, setListDistintasCategorias] = useState([]);\r\n  const [listUnificacionGastosPresupuesto, setListUnificacionGastosPresupuesto] = useState([]);\r\n  const [showListGasto, setshowListGasto] = useState(false);\r\n  const [listCategorias, setListCategorias] = useState([]);\r\n  const [listSubCategorias, setListSubCategorias] = useState([]);\r\n  const [abrirModal, setAbrirModal] = useState(false);\r\n  const initData = {\r\n    gastoId: '',\r\n    categoriaId: '',\r\n    sub_categoriaId: null,\r\n    descripcion: '',\r\n    monto: 0,\r\n    estadoId: 1,\r\n  };\r\n  const [values, handleOnChange] = useForm({\r\n    fechaInicial: moment(`${new Date().getFullYear()}-${new Date().getMonth() + 1}-01`, 'YYYY-MM-DD').format('YYYY-MM-DD'),\r\n    fechaFinal: moment(new Date(), 'YYYY-MM-DD').add(1, \"days\").format('YYYY-MM-DD')\r\n  });\r\n  const handleEditar = (id) => {\r\n    const { gastoId, categoriaId, sub_categoriaId, descripcion, monto, estadoId } = listGastos.find(item => item.gastoId === id);\r\n    setdataInicial({\r\n      gastoId,\r\n      categoriaId,\r\n      sub_categoriaId,\r\n      descripcion,\r\n      monto,\r\n      estadoId,\r\n    });\r\n    setAbrirModal(true);\r\n  }\r\n\r\n  const [dataInicial, setdataInicial] = useState(initData);\r\n  const GetCategoria = async () => {\r\n    let response = await callApi('ctl/categoria?estadoId=1&include=0');\r\n    if (response) {\r\n      setListCategorias(response);\r\n    }\r\n  }\r\n  const GetSubCategoria = async () => {\r\n    let response = await callApi('ctl/subcategoria?estadoId=1');\r\n    if (response) {\r\n      setListSubCategorias(response);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    GetCategoria();\r\n    GetSubCategoria();\r\n    GetListGasto();\r\n  }, [])\r\n\r\n  const Distintos = (array) => {\r\n    const newList = [];\r\n    for (const item of array) {\r\n      let existe = newList.find(i => Number(i.id) === Number(item.id));\r\n      if (!existe) {\r\n        newList.push(item);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (listGastos.length > 0) {\r\n      let listCategoriasGasto = listGastos.map(({ categoriaId, categoria }) => {\r\n        return {\r\n          id: categoriaId,\r\n          descripcion: categoria\r\n        }\r\n      });\r\n      let listDistintasCategorias = Distintos(listCategoriasGasto);\r\n      setListDistintasCategorias(listDistintasCategorias);\r\n    } else {\r\n      setListDistintasCategorias([]);\r\n      setListUnificacionGastosPresupuesto([]);\r\n      setTotalGastoPresupuesto({\r\n        gasto: 0,\r\n        presupuesto: 0\r\n      });\r\n    }\r\n  }, [listGastos, listPresupuesto])\r\n\r\n  useEffect(() => {\r\n    if (listDistintasCategorias.length > 0) {\r\n      let gasto = 0;\r\n      let presupuesto = 0;\r\n      let unificacion = listDistintasCategorias.map(({ id, descripcion }) => {\r\n        let totalGastos = 0;\r\n        let totalPresupuesto = 0;\r\n        listGastos.map(({ categoriaId, monto }) => {\r\n          if (Number(categoriaId) === Number(id)) {\r\n            totalGastos += Number(monto)\r\n          }\r\n        });\r\n        listPresupuesto.map(({ categoriaId, monto }) => {\r\n          if (Number(categoriaId) === Number(id)) {\r\n            totalPresupuesto += Number(monto)\r\n          }\r\n        });\r\n        gasto += Number(totalGastos);\r\n        presupuesto += Number(totalPresupuesto);\r\n        return {\r\n          id: uuidv4(),\r\n          categoria: descripcion,\r\n          presupuesto: Number(totalPresupuesto).toFixed(2),\r\n          gasto: Number(totalGastos).toFixed(2)\r\n        }\r\n      });\r\n      setListUnificacionGastosPresupuesto(unificacion);\r\n      setTotalGastoPresupuesto({\r\n        gasto,\r\n        presupuesto\r\n      });\r\n    } else {\r\n      setListUnificacionGastosPresupuesto([]);\r\n      setTotalGastoPresupuesto({\r\n        gasto: 0,\r\n        presupuesto: 0\r\n      });\r\n    }\r\n  }, [listDistintasCategorias])\r\n\r\n\r\n  const handleFiltrar = async () => {\r\n    await GetListGasto();\r\n  }\r\n  const GetListGasto = async () => {\r\n    setLoading(true);\r\n    let response = await callApi('ctl/gasto/list', {\r\n      method: 'POST',\r\n      body: JSON.stringify(values)\r\n    });\r\n    if (response) {\r\n      if (response.gastos.length > 0) {\r\n        let auxGasto = response.gastos.map(item => {\r\n          item.mesId = moment(item.fecha_crea, 'YYYY-MM-DD').format('MM');\r\n          item.anioId = moment(item.fecha_crea, 'YYYY-MM-DD').format('YYYY');\r\n          return item;\r\n        });\r\n        setListGastos(auxGasto);\r\n      } else {\r\n        setListGastos([]);\r\n      }\r\n      if (response.presupuesto.length > 0) {\r\n        setListPresupuesto(response?.presupuesto || []);\r\n      } else {\r\n        setListPresupuesto([]);\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }\r\n  const handleNuevoGasto = () => {\r\n    setdataInicial(initData);\r\n    setAbrirModal(true);\r\n  }\r\n  useEffect(() => {\r\n    GetListGasto();\r\n  }, [refreshData])\r\n  return (\r\n    <>\r\n      <Aux>\r\n        <Row>\r\n          <Col xl={12} md={12}>\r\n            <Card className=\"quater-card\">\r\n              <Card.Header>\r\n                <h5>Filtros</h5>\r\n              </Card.Header>\r\n              <Card.Body className='pb-0'>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-3\">\r\n                    <div className=\"form-group col\">\r\n                      <label className=\"form-label\">Fecha Inicial</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"fechaInicial\"\r\n                        name=\"fechaInicial\"\r\n                        value={values.fechaInicial}\r\n                        onChange={handleOnChange}\r\n                        className=\"form-control\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-3\">\r\n                    <div className=\"form-group col\">\r\n                      <label className=\"form-label\">Fecha Final</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"fechaFinal\"\r\n                        name=\"fechaFinal\"\r\n                        value={values.fechaFinal}\r\n                        onChange={handleOnChange}\r\n                        className=\"form-control\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-3\">\r\n                    <div className=\"form-group col\">\r\n                      <label className=\"form-label\">&nbsp;&nbsp;</label>\r\n                      <div className=\"mb-3 input-group\">\r\n                        <div className=\"input-group-append\">\r\n                          <button className=\"btn btn-primary\" onClick={() => { handleFiltrar() }}>Filtrar<i className=\"feather icon-search\" /></button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        {\r\n          loading === true ? <Loading />\r\n            :\r\n            <>\r\n              <Row>\r\n                <Col xl={12} md={12}>\r\n                  <Card className=\"quater-card\">\r\n                    <Card.Body>\r\n                      <h6 className=\"text-muted m-b-15\">Gastos <Button\r\n                        key=\"btnBack\"\r\n                        variant=\"success\"\r\n                        size=\"sm\"\r\n                        onClick={(e) => { handleNuevoGasto() }}>\r\n                        Add. +\r\n                      </Button></h6>\r\n                      <h5>Q{Number(totalGastoPresupuesto.gasto).toFixed(2)}/Q{Number(totalGastoPresupuesto.presupuesto).toFixed(2)}</h5>\r\n                      {\r\n                        listUnificacionGastosPresupuesto.length > 0 &&\r\n                        listUnificacionGastosPresupuesto.map(({ id, categoria, presupuesto, gasto }) => {\r\n                          return (\r\n                            <ItemPresupestoGasto texto={categoria} presupuesto={presupuesto} gasto={gasto} key={id} />\r\n                          )\r\n                        })\r\n                      }\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col md={12}>\r\n                  <Card>\r\n                    <Card.Header>\r\n                      <Card.Title as=\"h5\">Listado de Gastos <Button\r\n                        key=\"btnBack\"\r\n                        variant=\"success\"\r\n                        size=\"sm\"\r\n                        onClick={(e) => { setshowListGasto(!showListGasto) }}>\r\n                        Mostrar\r\n                      </Button></Card.Title>\r\n                    </Card.Header>\r\n                    {\r\n                      showListGasto === true &&\r\n                      <Card.Body>\r\n                        <GastoListar handleEditar={handleEditar} listGastos={listGastos} setListGastos={setListGastos} setshowListGasto={setshowListGasto} listCategorias={listCategorias} listSubCategorias={listSubCategorias} setLoading={setLoading} />\r\n                      </Card.Body>\r\n                    }\r\n                  </Card>\r\n                </Col>\r\n                <GraficaGastosPorCategoria listUnificacionGastosPresupuesto={listUnificacionGastosPresupuesto} />\r\n                <GraficaPresupuestoVrsGasto listGastos={listGastos} values={values} listPresupuesto={listPresupuesto} />\r\n              </Row>\r\n            </>\r\n        }\r\n      </Aux>\r\n\r\n      {\r\n        abrirModal === true && <GastoUpSert setRefreshData={setRefreshData} setAbrirModal={setAbrirModal} abrirModal={abrirModal} dataInicial={dataInicial} listCategorias={listCategorias} listSubCategorias={listSubCategorias} />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nconst ItemPresupestoGasto = ({ texto, presupuesto, gasto }) => {\r\n  const [porcentaje, setPorcentaje] = useState(0);\r\n  const [color, setColor] = useState(\"success\");\r\n  const listColor = [\"success\", \"warning\", \"danger\"];\r\n  useEffect(() => {\r\n    let aux = Number(gasto) / Number(presupuesto);\r\n    if (Number.isFinite(aux)) {\r\n      aux = Number(aux * 100).toFixed(0);\r\n      setPorcentaje(aux);\r\n    } else {\r\n      setPorcentaje(100);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (porcentaje > 0) {\r\n      if (porcentaje <= 70) {\r\n        setColor(listColor[0]);\r\n      } else if (porcentaje <= 95) {\r\n        setColor(listColor[1]);\r\n      } else {\r\n        setColor(listColor[2]);\r\n      }\r\n    } else {\r\n      setColor(listColor[2]);\r\n    }\r\n  }, [porcentaje]);\r\n  return (\r\n    <>\r\n      <p className=\"text-muted mb-2\">{texto} (Q{Number(gasto).toFixed(2)}/{Number(presupuesto).toFixed(2)})<span className=\"float-right\">{porcentaje}%(Q{Number(gasto).toFixed(2)})</span></p>\r\n      <ProgressBar variant={color} now={porcentaje} />\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport const GraficaGastosPorCategoria = ({ listUnificacionGastosPresupuesto = [] }) => {\r\n  const [listLabes, setListLabes] = useState([])\r\n  const [listValue, setListValue] = useState([])\r\n  useEffect(() => {\r\n    if (listUnificacionGastosPresupuesto.length > 0) {\r\n      let listAuxCategoria = [];\r\n      let listAuxMonto = [];\r\n      listUnificacionGastosPresupuesto.map(({ categoria, gasto }) => {\r\n        listAuxCategoria.push(String(categoria));\r\n        listAuxMonto.push(Number(gasto));\r\n      });\r\n      setListLabes(listAuxCategoria);\r\n      setListValue(listAuxMonto);\r\n    }\r\n  }, [listUnificacionGastosPresupuesto])\r\n\r\n  const getData = () => {\r\n    return {\r\n      height: 320,\r\n      type: 'donut',\r\n      options: {\r\n        colors: ['#4680ff', '#0e9e4a', '#00acc1', '#ffa21d', '#ff5252', '#ff2364', '#00cccc', '#000fff', '#0ef9ef', '#ffa24e'],\r\n        legend: {\r\n          show: true,\r\n          position: 'bottom',\r\n        },\r\n        labels: listLabes,\r\n        plotOptions: {\r\n          pie: {\r\n            donut: {\r\n              labels: {\r\n                show: true,\r\n                name: {\r\n                  show: true\r\n                },\r\n                value: {\r\n                  show: true\r\n                }\r\n              }\r\n            }\r\n          },\r\n        },\r\n        tooltip: {\r\n          y: {\r\n            formatter: (val) => 'Q' + parseFloat(val).toFixed(2)\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          dropShadow: {\r\n            enabled: false,\r\n          }\r\n        },\r\n        responsive: [{\r\n          breakpoint: 480,\r\n          options: {\r\n            chart: {\r\n              width: 200\r\n            },\r\n            legend: {\r\n              position: 'bottom'\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      series: listValue\r\n    }\r\n  }\r\n  return (\r\n    <Col md={12}>\r\n      <Card>\r\n        <Card.Header>\r\n          <Card.Title as=\"h5\">Gastos por Categoría</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Chart {...getData()} />\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport const GraficaPresupuestoVrsGasto = ({ listGastos = [], listPresupuesto = [], values }) => {\r\n  const [listMesesAnios, setlistMesesAnios] = useState([]);\r\n  const [listGastoPresupuestoMesAnio, setlistGastoPresupuestoMesAnio] = useState([]);\r\n  const [listLabelsGrafica, setListLabelsGrafica] = useState([]);\r\n  const [listGastosGrafica, setListGastosGrafica] = useState([]);\r\n  const [listPresupuestoGrafica, setListPresupuestoGrafica] = useState([]);\r\n  useEffect(() => {\r\n    let listMesesAniosAux = [];\r\n    let mesIdInicio = Number(moment(values.fechaInicial, 'YYYY-MM-DD').format('MM'));\r\n    let anioIdInicio = Number(moment(values.fechaInicial, 'YYYY-MM-DD').format('YYYY'));\r\n\r\n    let mesIdFin = Number(moment(values.fechaFinal, 'YYYY-MM-DD').format('MM'));\r\n    let anioIdFin = Number(moment(values.fechaFinal, 'YYYY-MM-DD').format('YYYY'));\r\n    for (let anio = anioIdInicio; anio <= anioIdFin; anio++) {\r\n      let mesFinAux = 12;\r\n      let mesInicioAux = 1;\r\n      if (anio === anioIdFin) {\r\n        mesFinAux = mesIdFin;\r\n      }\r\n      if (anio === anioIdInicio) {\r\n        mesInicioAux = mesIdInicio\r\n      }\r\n      for (let mes = mesInicioAux; mes <= mesFinAux; mes++) {\r\n        let item = {};\r\n        item.anioId = anio;\r\n        item.mesId = mes;\r\n        listMesesAniosAux.push(item);\r\n      }\r\n    }\r\n    setlistMesesAnios(listMesesAniosAux);\r\n  }, [listGastos]);\r\n\r\n  useEffect(() => {\r\n    if (listGastos.length > 0) {\r\n      let list = [];\r\n      listMesesAnios.map(({ anioId, mesId }) => {\r\n        let item = {};\r\n        item.anioId = Number(anioId);\r\n        item.mesId = Number(mesId);\r\n        let listGastosMesAnio = listGastos.filter(i => Number(i.anioId) === Number(anioId) && Number(i.mesId) === Number(mesId));\r\n        let listPresupuestoMesAnio = listPresupuesto.filter(i => Number(i.anio) === Number(anioId) && Number(i.mesId) === Number(mesId));\r\n        item.gasto = parseInt(listGastosMesAnio.reduce((a, b) => a + Number(b.monto), 0));\r\n        item.presupuesto = parseInt(listPresupuestoMesAnio.reduce((a, b) => a + Number(b.monto), 0));\r\n        let existe = list.find(i => Number(i.anioId) === Number(anioId) && Number(i.mesId) === Number(mesId));\r\n        if (!existe) {\r\n          list.push(item);\r\n        }\r\n      });\r\n      console.log({ list });\r\n      setlistGastoPresupuestoMesAnio(list);\r\n    } else {\r\n      setlistGastoPresupuestoMesAnio([]);\r\n    }\r\n  }, [listMesesAnios]);\r\n\r\n  useEffect(() => {\r\n    if (listGastoPresupuestoMesAnio.length > 0) {\r\n      let labels = [];\r\n      let gastoList = [];\r\n      let presupuestoList = [];\r\n      listGastoPresupuestoMesAnio.map(({ anioId, mesId, presupuesto, gasto }) => {\r\n        gastoList.push(gasto);\r\n        presupuestoList.push(presupuesto);\r\n        if (mesId < 10) {\r\n          labels.push(`0${mesId}/${String(anioId).substring(2, 4)}`);\r\n        } else {\r\n          labels.push(`${mesId}/${String(anioId).substring(2, 4)}`);\r\n        }\r\n      });\r\n      setListLabelsGrafica(labels);\r\n      setListGastosGrafica(gastoList);\r\n      setListPresupuestoGrafica(presupuestoList);\r\n    }\r\n  }, [listGastoPresupuestoMesAnio])\r\n\r\n  const data3 = {\r\n    height: 350,\r\n    type: 'line',\r\n    options: {\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        width: [0, 4]\r\n      },\r\n      colors: ['#4680ff', '#ff5252'],\r\n      title: {\r\n        text: 'Presupuesto vrs Gasto'\r\n      },\r\n      labels: listLabelsGrafica,\r\n      xaxis: {\r\n        // type: 'datetime'\r\n      },\r\n      yaxis: [{\r\n        title: {\r\n          text: 'Presupuesto',\r\n        },\r\n\r\n      }, {\r\n        opposite: true,\r\n        title: {\r\n          text: 'Gasto'\r\n        }\r\n      }],\r\n      tooltip: {\r\n        y: {\r\n          formatter: (val) => 'Q' + parseFloat(val).toFixed(2)\r\n        }\r\n      },\r\n\r\n    },\r\n    series: [{\r\n      name: 'Presupuesto',\r\n      type: 'column',\r\n      data: listPresupuestoGrafica\r\n    }, {\r\n      name: 'Gasto',\r\n      type: 'line',\r\n      data: listGastosGrafica\r\n    }]\r\n  };\r\n\r\n\r\n  return (\r\n    <Col md={12}>\r\n      <Card>\r\n        <Card.Header>\r\n          <Card.Title as=\"h5\">Presupuesto vrs Gasto</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Chart {...data3} />\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {ControlGastoHome} from '../components/base/ControlGastoHome'\r\n\r\nconst ControlGastoHomePage = () => {\r\n    return (\r\n        <ControlGastoHome />\r\n    )\r\n}\r\n\r\nexport default ControlGastoHomePage;"],"sourceRoot":""}