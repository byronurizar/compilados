{"version":3,"sources":["helpers/estiloTabla.js","../node_modules/@babel/runtime/helpers/inheritsLoose.js","App/components/base/UsuarioUpSert.js","App/components/base/UsuarioRol.js","App/components/base/UsuarioListar.js","App/pages/UsuarioPage.js"],"names":["$","DataTable","require","asignarEstiloTabla","selector","filas","searching","bLengthChange","bAutoWidth","lengthMenu","displayLength","language","processing","search","info","infoEmpty","infoFiltered","infoPostFix","loadingRecords","zeroRecords","emptyTable","paginate","first","previous","next","last","aria","sortAscending","sortDescending","limpiarEstiloTabla","destroy","module","exports","subClass","superClass","prototype","Object","create","constructor","__proto__","UsuarioUpSert","dataInicial","personas","abrirModal","setAbrirModal","GetUsuarios","useForm","values","handleOnChange","setValues","useState","loading","setLoading","NuevoRegistro","a","callApi","method","body","JSON","stringify","alert_exitoso","ActualizarRegistro","response","handleOnSubmit","e","preventDefault","usuarioId","hanldeOnChangePassword","target","name","value","Modal","show","onHide","Loading","Header","closeButton","cambioPass","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","id","className","classNamePrefix","defaultValue","find","i","personaId","required","placeholder","onChange","options","user_name","auxUsername","String","trim","toUpperCase","errorMessage","autoComplete","type","pattern","password_nuevo","validator","password","password_confirmar","dias_cambio_password","fechaActual","Date","nuevaFecha","moment","add","fecha","format","fecha_cambio_password","Control","checked","forzar_cambio_password","estadoId","onClick","UsuarioRol","catRol","state","useSelector","dispatch","useDispatch","accesos","setAccesos","catRolesAsignados","setRolesAsignados","data","GetRolesAsignados","handleChangeChecbox","usuario_rolId","rolId","estadoAux","acceso","menuId","accesoId","UpdateUserInfo","useEffect","misAccesos","filter","item","GetAccesosByMenuId","size","Table","striped","hover","responsive","bordered","map","nombre","filaRol","asignado","key","style","textAlign","NoAutorizado","UsuarioListar","abrirModalUsuarioRol","setAbrirModalUsuarioRol","usuarios","setUsuarios","setPersonas","setCatRol","initData","setdataInicial","GetPersonas","listPersonas","nombre1","nombre2","nombre_otros","apellido1","apellido2","apellido_casada","nombreCompleto","email","label","push","GetCatRol","length","sm","Card","Button","variant","fecha_crea","Persona","estado","Estado","descripcion","handleUsuarioRol","handleCanbioPass","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","listActual","UsuarioPage"],"mappings":"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","file":"static/js/17.04fbfabd.chunk.js","sourcesContent":["import $ from 'jquery';\r\n$.DataTable = require('datatables.net-bs');\r\nrequire('datatables.net-responsive-bs');\r\n\r\nexport const asignarEstiloTabla = (selector,filas=10) => {\r\n    $(selector).DataTable({\r\n        searching: true,\r\n        bLengthChange: false,\r\n        bAutoWidth: false,\r\n        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"Todos\"]],\r\n        displayLength: filas,\r\n        language: {\r\n            processing: \"Cargando información\",\r\n            search: \"Filtrar por:\",\r\n            lengthMenu: \"Mostrar _MENU_ filas\",\r\n            info: \"Vizualización  _END_ de _TOTAL_ filas\",\r\n            infoEmpty: \"Vizualización del elemento 0 a 0 de 0 filas\",\r\n            infoFiltered: \"(Filtrado de _MAX_ filas en total)\",\r\n            infoPostFix: \"\",\r\n            loadingRecords: \"Cargando...\",\r\n            zeroRecords: \"No se logró encontrar ninguna coincidencia\",\r\n            emptyTable: \"No existen registros\",\r\n            paginate: {\r\n                first: \"Primera\",\r\n                previous: \"Anterior\",\r\n                next: \"Siguiente\",\r\n                last: \"Ultima\"\r\n            },\r\n            aria: {\r\n                sortAscending: \": active para ordenar la columna en orden ascendente\",\r\n                sortDescending: \": active para ordenar la columna en orden descendente\"\r\n            }\r\n        }\r\n    });\r\n}\r\nexport const limpiarEstiloTabla=(selector)=>{\r\n        $(selector).DataTable().destroy();\r\n}","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","import React, { useState } from 'react'\r\nimport Select from 'react-select';\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const UsuarioUpSert = ({ dataInicial, personas, abrirModal, setAbrirModal, GetUsuarios }) => {\r\n    const [values, handleOnChange, , setValues] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false)\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('usuario', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Usuario registrado exitosamente\");\r\n            GetUsuarios();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('usuario', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetUsuarios();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.usuarioId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleChangePersona = ({ value }) => {\r\n        setValues({ ...values, personaId: value });\r\n    }\r\n    const handleUserName = ({ target: { value } }) => {\r\n        let auxUsername = String(value).trim().toUpperCase();\r\n        setValues({ ...values, user_name: auxUsername });\r\n    }\r\n    const hanldeOnChangePassword = ({ target: { name, value } }) => {\r\n        setValues({ ...values, [name]: value });\r\n    }\r\n    const handleDuracionContrasenia = ({ target: { value } }) => {\r\n        let fechaActual = new Date();\r\n        let nuevaFecha = moment(fechaActual, \"YYYY/MM/DD\").add(\"days\", value);\r\n        if (value > 0) {\r\n            let fecha = moment(nuevaFecha).format('YYYY/MM/DD');\r\n            setValues({ ...values, fecha_cambio_password: fecha, dias_cambio_password: value });\r\n        } else {\r\n            setValues({ ...values, fecha_cambio_password: \"\", dias_cambio_password: value });\r\n        }\r\n    }\r\n    const handleChangeForzarCambioPass = () => {\r\n        setValues({ ...values, forzar_cambio_password: !values.forzar_cambio_password });\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n    const confirmarPassWord = (value) => {\r\n        return value && value === values.password;\r\n    };\r\n    const errorMessage = \"Campo obligatorio\";\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)}>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            {\r\n                                dataInicial.cambioPass === true &&\r\n                                <Modal.Title as=\"h5\">Cambio de contraseña</Modal.Title>\r\n                            }\r\n                            {\r\n                                !dataInicial.cambioPass &&\r\n                                <Modal.Title as=\"h5\">{dataInicial.usuarioId > 0 ? 'Actualizar Usuario' : 'Nuevo Usuario'}</Modal.Title>\r\n                            }\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    {\r\n                                        !dataInicial.cambioPass &&\r\n                                        <>\r\n                                            <Form.Group as={Col} md=\"12\">\r\n                                                <Form.Label htmlFor=\"personaId\">Persona</Form.Label>\r\n                                                <Select\r\n                                                    id=\"personaId\"\r\n                                                    name=\"personaId\"\r\n                                                    className=\"basic-single\"\r\n                                                    classNamePrefix=\"select\"\r\n                                                    defaultValue={personas.find(i => i.value === values.personaId)}\r\n                                                    required\r\n                                                    placeholder=\"Persona\"\r\n                                                    onChange={handleChangePersona}\r\n                                                    options={personas}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Col} md=\"12\">\r\n                                                <Form.Label htmlFor=\"user_name\">Nombre de Usuario</Form.Label>\r\n                                                <TextInput\r\n                                                    name=\"user_name\"\r\n                                                    id=\"user_name\"\r\n                                                    required\r\n                                                    value={values.user_name}\r\n                                                    onChange={handleUserName}\r\n                                                    errorMessage={errorMessage}\r\n                                                    placeholder=\"Nombre de Usuario\"\r\n                                                    autoComplete=\"off\"\r\n                                                    type=\"text\"\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    }\r\n\r\n                                    {\r\n                                        (!dataInicial.usuarioId || dataInicial.cambioPass === true) &&\r\n                                        <>\r\n                                            <Form.Group as={Col} md=\"12\">\r\n                                                <Form.Label htmlFor=\"password\">{\r\n                                                    dataInicial.cambioPass === true ? 'Nueva Contraseña' : 'Contraseña'\r\n                                                }</Form.Label>\r\n                                                <TextInput\r\n                                                    name=\"password\"\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    placeholder=\"Contraseña\"\r\n                                                    required\r\n                                                    pattern=\"(?=.*[A-Z]).{6,}\"\r\n                                                    errorMessage={{ required: errorMessage, pattern: \"La contraseña debe de tener al menos 6 caracteres y contener al menos una letra mayúscula\" }}\r\n                                                    value={values.password_nuevo}\r\n                                                    onChange={hanldeOnChangePassword}\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Col} md=\"12\">\r\n                                                <Form.Label htmlFor=\"user_name\">Confirmar Contraseña</Form.Label>\r\n                                                <TextInput\r\n                                                    name=\"password_confirmar\"\r\n                                                    id=\"password_confirmar\"\r\n                                                    type=\"password\"\r\n                                                    placeholder=\"Confirmar Nueva Contraseña\"\r\n                                                    required\r\n                                                    validator={confirmarPassWord}\r\n                                                    errorMessage={{ required: \"Por favor confirme la nueva contraseña\", validator: \"La contraseña no coincide\" }}\r\n                                                    value={values.password_confirmar}\r\n                                                    onChange={hanldeOnChangePassword}\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    }\r\n\r\n                                    {\r\n                                        !dataInicial.cambioPass &&\r\n                                        <>\r\n                                            <Form.Group as={Col} md=\"12\">\r\n                                                <Form.Label htmlFor=\"cambioContrasenia\">Cambio de Contraseña</Form.Label>\r\n                                                <SelectGroup\r\n                                                    name=\"cambioContrasenia\"\r\n                                                    id=\"cambioContrasenia\"\r\n                                                    value={values.dias_cambio_password}\r\n                                                    errorMessage={errorMessage}\r\n                                                    onChange={handleDuracionContrasenia}>\r\n                                                    <option value=\"\">Seleccione</option>\r\n                                                    <option value=\"30\">30 días</option>\r\n                                                    <option value=\"60\">60 días</option>\r\n                                                    <option value=\"90\">90 días</option>\r\n                                                    <option value=\"120\">120 días</option>\r\n                                                    <option value=\"0\">Nunca</option>\r\n                                                </SelectGroup>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Col} md=\"12\">\r\n                                                <div className=\"switch switch-alternative d-inline m-r-10\">\r\n                                                    <Form.Control type=\"checkbox\" id=\"forzar_cambio_password\" checked={values.forzar_cambio_password} onChange={handleChangeForzarCambioPass} />\r\n                                                    <Form.Label htmlFor=\"forzar_cambio_password\" className=\"cr\" />\r\n                                                </div>\r\n                                                <Form.Label>Forzar Cambio de contraseña</Form.Label>\r\n                                            </Form.Group>\r\n                                            {\r\n                                                dataInicial.usuarioId > 0 &&\r\n                                                <Form.Group as={Col} md=\"12\">\r\n                                                    <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                                    <SelectGroup\r\n                                                        name=\"estadoId\"\r\n                                                        id=\"estadoId\"\r\n                                                        value={values.estadoId}\r\n                                                        required\r\n                                                        errorMessage={errorMessage}\r\n                                                        onChange={handleOnChange}>\r\n                                                        <option value=\"\">Seleccione un estado</option>\r\n                                                        <option value=\"1\">Activo</option>\r\n                                                        <option value=\"2\">Inactivo</option>\r\n                                                    </SelectGroup>\r\n                                                </Form.Group>\r\n                                            }\r\n                                        </>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.usuarioId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Table, Form, Modal } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso } from '../../../helpers/Notificacion';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nconst menuId = 18;\r\nconst menuIdRol = 11;\r\nexport const UsuarioRol = ({ usuarioId, abrirModal, setAbrirModal, catRol }) => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const dispatch = useDispatch();\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [catRolesAsignados, setRolesAsignados] = useState([]);\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdRol);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const NuevoRegistro = async (data) => {\r\n        let response = await callApi('usuario/rol', {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Perfil Asignado exitosamente\");\r\n            GetRolesAsignados(usuarioId);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async (data) => {\r\n        let response = await callApi('usuario/rol', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetRolesAsignados(usuarioId);\r\n        }\r\n    }\r\n\r\n    const handleChangeChecbox = async (usuario_rolId, rolId, estadoId) => {\r\n        setLoading(true);\r\n        if (usuario_rolId === 0) {\r\n            const data = {\r\n                usuarioId,\r\n                rolId,\r\n                estadoId: 1\r\n            };\r\n\r\n            await NuevoRegistro(data);\r\n        } else if (usuario_rolId > 0) {\r\n            let estadoAux = 3;\r\n            if (estadoId === 1) {\r\n                estadoAux = 2;\r\n            } else if (estadoId === 2) {\r\n                estadoAux = 1;\r\n            }\r\n            const data = {\r\n                usuario_rolId,\r\n                estadoId: estadoAux\r\n            };\r\n            await ActualizarRegistro(data);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetRolesAsignados = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            dispatch(UpdateUserInfo());\r\n            let response = await callApi(`usuario/rol?usuarioId=${id}&estadoId=1;2`);\r\n            if (response) {\r\n                setRolesAsignados(response);\r\n            }\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetRolesAsignados(usuarioId);\r\n    }, [usuarioId, accesos]);\r\n\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">Perfiles</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            {\r\n                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                    accesos.find(acceso => acceso.menuId === menuIdRol && acceso.accesoId === 3) ?\r\n                                        <Table striped hover responsive bordered id=\"mytable\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Codigo acceso</th>\r\n                                                    <th>Acceso</th>\r\n                                                    {\r\n                                                        (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) || accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1)) &&\r\n                                                        <th></th>\r\n                                                    }\r\n                                                </tr>\r\n\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {\r\n                                                    catRol.map(({ rolId, nombre }) => {\r\n                                                        const filaRol = catRolesAsignados.find(item => item.rolId === rolId);\r\n                                                        let asignado = false;\r\n                                                        const { usuario_rolId = 0, estadoId = 0 } = !!filaRol && filaRol;\r\n                                                        if (estadoId === 1) {\r\n                                                            asignado = true;\r\n                                                        }\r\n                                                        return (\r\n                                                            (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) || asignado || usuario_rolId > 0) &&\r\n                                                            <tr key={rolId}>\r\n                                                                <td>{rolId}</td>\r\n                                                                <td>{nombre}</td>\r\n                                                                {\r\n                                                                    (estadoId === 1 || estadoId === 2) ?\r\n                                                                        <>{\r\n                                                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) ?\r\n                                                                                <td style={{ textAlign: \"center\" }}>\r\n                                                                                    <Form.Group>\r\n                                                                                        <div className=\"switch switch-alternative d-inline m-r-10\">\r\n                                                                                            <Form.Control type=\"checkbox\" id={`rolId_${rolId}`} checked={asignado} onChange={() => { handleChangeChecbox(usuario_rolId, rolId, estadoId); }} />\r\n                                                                                            <Form.Label htmlFor={`rolId_${rolId}`} className=\"cr\" />\r\n                                                                                        </div>\r\n                                                                                        <Form.Label htmlFor={`rolId_${rolId}`}>{\r\n                                                                                            asignado ? 'Activo' : 'Inactivo'\r\n                                                                                        }</Form.Label>\r\n                                                                                    </Form.Group>\r\n                                                                                </td>\r\n                                                                                :\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                                                <td style={{ textAlign: \"center\" }}><label className=\"text-danger\">No Autorizado</label></td>\r\n                                                                        }\r\n                                                                        </>\r\n                                                                        :\r\n                                                                        <>\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) ?\r\n                                                                                    <td style={{ textAlign: \"center\" }}>\r\n                                                                                        <Form.Group>\r\n                                                                                            <div className=\"switch switch-alternative d-inline m-r-10\">\r\n                                                                                                <Form.Control type=\"checkbox\" id={`rolId_${rolId}`} checked={asignado} onChange={() => { handleChangeChecbox(usuario_rolId, rolId, estadoId); }} />\r\n                                                                                                <Form.Label htmlFor={`rolId_${rolId}`} className=\"cr\" />\r\n                                                                                            </div>\r\n                                                                                            <Form.Label htmlFor={`rolId_${rolId}`}>Asignar Perfil</Form.Label>\r\n                                                                                        </Form.Group>\r\n                                                                                    </td> : <td></td>\r\n                                                                            }\r\n                                                                        </>\r\n                                                                }\r\n                                                            </tr>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                            </tbody>\r\n                                        </Table>\r\n                                        : <NoAutorizado />\r\n                                    : <NoAutorizado />\r\n                            }\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport Swal from 'sweetalert2';\r\nimport { useSelector } from 'react-redux';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { UsuarioUpSert } from './UsuarioUpSert';\r\nimport { UsuarioRol } from './UsuarioRol';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nimport { asignarEstiloTabla, limpiarEstiloTabla } from '../../../helpers/estiloTabla';\r\nconst menuId = 17;\r\nconst menuIdRol = 11;\r\nconst menuIdPersona = 12;\r\nconst menuIdUsuarioRol = 18;\r\nexport const UsuarioListar = () => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [abrirModalUsuarioRol, setAbrirModalUsuarioRol] = useState(false);\r\n    const [usuarios, setUsuarios] = useState([]);\r\n    const [personas, setPersonas] = useState([]);\r\n    const [catRol, setCatRol] = useState([]);\r\n    const initData = {\r\n        personaId: '',\r\n        user_name: '',\r\n        password: '',\r\n        forzar_cambio_password: false,\r\n        fecha_cambio_password: '',\r\n        dias_cambio_password: 0,\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdRol || item.menuId === menuIdPersona || item.menuId === menuIdUsuarioRol);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetUsuarios = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            limpiarEstiloTabla(\"#mytable\");\r\n            setLoading(true);\r\n            let response = await callApi('usuario?estadoId=1;2');\r\n            if (response) {\r\n                setUsuarios(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n        asignarEstiloTabla(\"#mytable\");\r\n    }\r\n    const GetPersonas = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdPersona && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('persona?include=0&estadoId=1');\r\n            if (response) {\r\n                let listPersonas = [];\r\n                response.map(({ personaId, nombre1, nombre2, nombre_otros, apellido1, apellido2, apellido_casada, email }) => {\r\n                    let nombreCompleto = nombre1;\r\n                    if (nombre2) {\r\n                        nombreCompleto += \" \" + nombre2;\r\n                    }\r\n                    if (nombre_otros) {\r\n                        nombreCompleto += \" \" + nombre_otros;\r\n                    }\r\n                    nombreCompleto += \" \" + apellido1;\r\n\r\n                    if (apellido2) {\r\n                        nombreCompleto += \" \" + apellido2;\r\n                    }\r\n                    if (apellido_casada) {\r\n                        nombreCompleto += \" \" + apellido_casada;\r\n                    }\r\n                    let item = {\r\n                        value: personaId,\r\n                        label: nombreCompleto,\r\n                    }\r\n                    listPersonas.push(item);\r\n                });\r\n\r\n                setPersonas(listPersonas);\r\n            }\r\n        } else {\r\n            setPersonas([{ value: '', label: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleEditar = (id) => {\r\n        let { usuarioId, personaId, user_name, forzar_cambio_password, dias_cambio_password, estadoId } = usuarios.find(item => item.usuarioId === id);\r\n        if (dias_cambio_password === null) {\r\n            dias_cambio_password = 0;\r\n        }\r\n        setdataInicial({\r\n            usuarioId,\r\n            personaId,\r\n            user_name,\r\n            forzar_cambio_password,\r\n            dias_cambio_password,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n\r\n    const handleUsuarioRol = (id) => {\r\n        let { usuarioId } = usuarios.find(item => item.usuarioId === id);\r\n        setdataInicial({\r\n            usuarioId\r\n        });\r\n        setAbrirModalUsuarioRol(true);\r\n    }\r\n\r\n\r\n    const GetCatRol = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdRol && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('rol?estadoId=1&include=0');\r\n            if (response) {\r\n                setCatRol(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleCanbioPass = (id) => {\r\n        let { usuarioId } = usuarios.find(item => item.usuarioId === id);\r\n        setdataInicial({\r\n            usuarioId,\r\n            password: '',\r\n            cambioPass: true\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`usuario/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    let listActual = usuarios.filter(item => item.usuarioId !== id);\r\n                    setUsuarios(listActual);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, [state?.accesos]);\r\n\r\n    useEffect(() => {\r\n        GetUsuarios();\r\n        GetPersonas();\r\n        GetCatRol();\r\n    }, [accesos]);\r\n    return (\r\n        accesos.length > 0 &&\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Usuarios</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Usuario</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"mytable\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Código</th>\r\n                                                            <th>Nombre</th>\r\n                                                            <th>Usuario</th>\r\n                                                            <th>Correo</th>\r\n                                                            <th>Fecha Vencimiento Contraseña</th>\r\n                                                            <th>Fecha Creación</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => acceso.menuId === menuIdUsuarioRol && acceso.accesoId === 3) &&\r\n                                                                <th>Perfiles</th>\r\n                                                            }\r\n                                                            <th>Cambio Contraseña</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            usuarios.map(({ usuarioId, user_name, fecha_cambio_password, fecha_crea, Persona: { nombre1, nombre2, nombre_otros, apellido1, apellido2, apellido_casada, email }, Estado: { descripcion: estado } }) => {\r\n                                                                let nombreCompleto = nombre1;\r\n                                                                if (nombre2) {\r\n                                                                    nombreCompleto += \" \" + nombre2;\r\n                                                                }\r\n                                                                if (nombre_otros) {\r\n                                                                    nombreCompleto += \" \" + nombre_otros;\r\n                                                                }\r\n                                                                nombreCompleto += \" \" + apellido1;\r\n\r\n                                                                if (apellido2) {\r\n                                                                    nombreCompleto += \" \" + apellido2;\r\n                                                                }\r\n                                                                if (apellido_casada) {\r\n                                                                    nombreCompleto += \" \" + apellido_casada;\r\n                                                                }\r\n                                                                return (\r\n                                                                    <tr key={usuarioId}>\r\n                                                                        <td>{usuarioId}</td>\r\n                                                                        <td>{nombreCompleto}</td>\r\n                                                                        <td>{user_name}</td>\r\n                                                                        <td>{email}</td>\r\n                                                                        <td>{\r\n                                                                            fecha_cambio_password !== null &&\r\n                                                                            moment(fecha_cambio_password).format('DD/MM/YYYY')\r\n                                                                        }\r\n                                                                        </td>\r\n                                                                        <td>{moment(fecha_crea).format('DD/MM/YYYY')}</td>\r\n                                                                        <td>{estado}</td>\r\n                                                                        {\r\n                                                                            accesos.find(acceso => acceso.menuId === menuIdUsuarioRol && acceso.accesoId === 3) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                                <button className=\"btn-icon btn btn-warning btn-sm\" onClick={() => { handleUsuarioRol(usuarioId) }}><i className=\"feather icon-check-square\" /></button>\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                        {\r\n                                                                            accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                            <>\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                    <td style={{ textAlign: \"center\" }}>\r\n                                                                                        <button className=\"btn-icon btn btn-success btn-sm\" onClick={() => { handleCanbioPass(usuarioId) }}><i className=\"feather icon-unlock\" /></button>\r\n                                                                                    </td>\r\n                                                                                }\r\n                                                                                <td style={{ textAlign: \"center\" }}>\r\n                                                                                    {\r\n                                                                                        accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                        <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(usuarioId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                    }\r\n                                                                                    {\r\n                                                                                        accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                        <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(usuarioId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                    }\r\n                                                                                </td>\r\n                                                                            </>\r\n                                                                        }\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <UsuarioUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} personas={personas} GetUsuarios={GetUsuarios} dataInicial={dataInicial} />\r\n                            }\r\n                            {\r\n                                abrirModalUsuarioRol === true &&\r\n                                <UsuarioRol abrirModal={abrirModalUsuarioRol} setAbrirModal={setAbrirModalUsuarioRol} catRol={catRol} usuarioId={dataInicial.usuarioId} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { UsuarioListar } from '../components/base/UsuarioListar';\r\nconst UsuarioPage = () => {\r\n    return (\r\n        <UsuarioListar/>\r\n    )\r\n}\r\n\r\nexport default UsuarioPage\r\n\r\n"],"sourceRoot":""}