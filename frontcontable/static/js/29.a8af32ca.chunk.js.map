{"version":3,"sources":["App/components/contable/SucursalUpSert.js","App/components/contable/SucursalBodegaUpSert.js","App/components/contable/SucursalBodegaListar.js","App/components/contable/SucursalListar.js","App/pages/contable/SucursalPage.js","App/components/base/NoAutorizado.js","helpers/estiloTabla.js"],"names":["SucursalUpSert","dataInicial","abrirModal","setAbrirModal","GetListado","listDeptos","accesos","useForm","values","handleOnChange","useState","loading","setLoading","departamentoId","setDepartamentoId","catMunicipio","setCatMunicipio","NuevoRegistro","a","callApi","method","body","JSON","stringify","alert_exitoso","ActualizarRegistro","sucursalId","response","handleOnSubmit","e","preventDefault","GetMunicipio","id","find","acceso","menuId","accesoId","municipioId","descripcion","useEffect","errorMessage","Modal","show","onHide","size","Loading","Header","closeButton","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","name","required","value","nombre","onChange","placeholder","autoComplete","type","multiline","target","map","key","direccion","puntoReferencia","estadoId","className","onClick","SucursalBodegaUpSert","bodegaId","SucursalBodegaListar","setVerBodegas","state","useSelector","setAccesos","listado","setListado","initData","setdataInicial","limpiarEstiloTabla","asignarEstiloTabla","misAccesos","filter","item","GetAccesosByMenuId","length","sm","Card","Button","variant","Table","striped","hover","responsive","bordered","Municipio","desMunicipio","desDepto","Departamento","estado","Estado","style","textAlign","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","listActual","NoAutorizado","SucursalListar","setListDeptos","verBodegas","GetDepartamentos","i","handleVerBodegas","SucursalPage","Heading","$","DataTable","require","selector","filas","setTimeout","destroy","searching","bLengthChange","bAutoWidth","lengthMenu","displayLength","language","processing","search","info","infoEmpty","infoFiltered","infoPostFix","loadingRecords","zeroRecords","emptyTable","paginate","first","previous","next","last","aria","sortAscending","sortDescending"],"mappings":"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","file":"static/js/29.a8af32ca.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from '../base/Loading';\r\nconst menuIdMunicipio = 10;\r\nexport const SucursalUpSert = ({ dataInicial, abrirModal, setAbrirModal, GetListado,listDeptos,accesos }) => {\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false);\r\n    const [departamentoId, setDepartamentoId] = useState('');\r\n    const [catMunicipio, setCatMunicipio] = useState([]);\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('sucursal', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"La sucursal se registro exitosamente\");\r\n            GetListado();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi(`sucursal/${dataInicial.sucursalId}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetListado();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.sucursalId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const onchangeDepartamento = ({ target }) => {\r\n        setDepartamentoId(target.value)\r\n    }\r\n\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const GetMunicipio = async (id) => {\r\n        if (id > 0) {\r\n            if (accesos.find(acceso => acceso.menuId === menuIdMunicipio && acceso.accesoId === 3)) {\r\n                setLoading(true);\r\n                let response = await callApi(`municipio?departamentoId=${id}&estadoId=1&include=0`);\r\n                if (response) {\r\n                    setCatMunicipio(response);\r\n                }\r\n            } else {\r\n                setCatMunicipio([{ municipioId: '', descripcion: 'No esta autorizado' }]);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    useEffect(() => {\r\n        if (dataInicial.departamentoId) {\r\n            setDepartamentoId(dataInicial.departamentoId);\r\n        }\r\n    }, [dataInicial.departamentoId]);\r\n    useEffect(() => {\r\n        GetMunicipio(departamentoId);\r\n    }, [departamentoId]);\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.sucursalId > 0 ? 'Actualizar Sucursal' : 'Nueva Sursal'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"nombre\">Nombre</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"nombre\"\r\n                                            id=\"nombre\"\r\n                                            required\r\n                                            value={values.nombre}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Nombre\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Descripción</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"descripcion\"\r\n                                            id=\"descripcion\"\r\n                                            multiline\r\n                                            required\r\n                                            value={values.descripcion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Descripción\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        \r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"departamentoId\">Departamento</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"departamentoId\"\r\n                                            id=\"departamentoId\"\r\n                                            required\r\n                                            value={departamentoId}\r\n                                            onChange={onchangeDepartamento}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un departamento</option>\r\n                                            {\r\n                                                listDeptos.map(({ departamentoId, descripcion }) => (\r\n                                                    <option value={departamentoId} key={departamentoId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"municipioId\">Municipio</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"municipioId\"\r\n                                            id=\"municipioId\"\r\n                                            required\r\n                                            value={values.municipioId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un municipio</option>\r\n                                            {\r\n                                                catMunicipio.map(({ municipioId, descripcion }) => (\r\n                                                    <option value={municipioId} key={municipioId}>{descripcion}</option>\r\n                                                ))\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Dirección</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"direccion\"\r\n                                            id=\"direccion\"\r\n                                            multiline\r\n                                            required\r\n                                            value={values.direccion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Dirección\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        \r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"puntoReferencia\">Punto de Referencia</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"puntoReferencia\"\r\n                                            id=\"puntoReferencia\"\r\n                                            multiline\r\n                                            required\r\n                                            value={values.puntoReferencia}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Punto de Referencia\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        \r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    {\r\n                                        dataInicial.sucursalId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.sucursalId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState,useEffect } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from '../base/Loading';\r\nconst menuIdMunicipio = 10;\r\nexport const SucursalBodegaUpSert = ({ dataInicial, abrirModal, setAbrirModal, GetListado,listDeptos,accesos }) => {\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false);\r\n    const [departamentoId, setDepartamentoId] = useState('');\r\n    const [catMunicipio, setCatMunicipio] = useState([]);\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('bodega', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"La bodega se registro exitosamente\");\r\n            GetListado();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi(`bodega/${dataInicial.bodegaId}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetListado();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.bodegaId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const onchangeDepartamento = ({ target }) => {\r\n        setDepartamentoId(target.value)\r\n    }\r\n\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const GetMunicipio = async (id) => {\r\n        if (id > 0) {\r\n            if (accesos.find(acceso => acceso.menuId === menuIdMunicipio && acceso.accesoId === 3)) {\r\n                setLoading(true);\r\n                let response = await callApi(`municipio?departamentoId=${id}&estadoId=1&include=0`);\r\n                if (response) {\r\n                    setCatMunicipio(response);\r\n                }\r\n            } else {\r\n                setCatMunicipio([{ municipioId: '', descripcion: 'No esta autorizado' }]);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    useEffect(() => {\r\n        if (dataInicial.departamentoId) {\r\n            setDepartamentoId(dataInicial.departamentoId);\r\n        }\r\n    }, [dataInicial.departamentoId]);\r\n    useEffect(() => {\r\n        GetMunicipio(departamentoId);\r\n    }, [departamentoId]);\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.bodegaId > 0 ? 'Actualizar Bodega' : 'Nueva Bodega'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"nombre\">Nombre</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"nombre\"\r\n                                            id=\"nombre\"\r\n                                            required\r\n                                            value={values.nombre}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Nombre\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Descripción</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"descripcion\"\r\n                                            id=\"descripcion\"\r\n                                            multiline\r\n                                            required\r\n                                            value={values.descripcion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Descripción\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        \r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"departamentoId\">Departamento</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"departamentoId\"\r\n                                            id=\"departamentoId\"\r\n                                            required\r\n                                            value={departamentoId}\r\n                                            onChange={onchangeDepartamento}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un departamento</option>\r\n                                            {\r\n                                                listDeptos.map(({ departamentoId, descripcion }) => (\r\n                                                    <option value={departamentoId} key={departamentoId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"municipioId\">Municipio</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"municipioId\"\r\n                                            id=\"municipioId\"\r\n                                            required\r\n                                            value={values.municipioId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un municipio</option>\r\n                                            {\r\n                                                catMunicipio.map(({ municipioId, descripcion }) => (\r\n                                                    <option value={municipioId} key={municipioId}>{descripcion}</option>\r\n                                                ))\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Dirección</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"direccion\"\r\n                                            id=\"direccion\"\r\n                                            multiline\r\n                                            required\r\n                                            value={values.direccion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Dirección\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        \r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"puntoReferencia\">Punto de Referencia</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"puntoReferencia\"\r\n                                            id=\"puntoReferencia\"\r\n                                            multiline\r\n                                            required\r\n                                            value={values.puntoReferencia}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Punto de Referencia\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        \r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    {\r\n                                        dataInicial.bodegaId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.bodegaId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport { useSelector } from 'react-redux';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { NoAutorizado } from '../base/NoAutorizado';\r\nimport Loading from '../base/Loading';\r\nimport { asignarEstiloTabla, limpiarEstiloTabla } from '../../../helpers/estiloTabla';\r\nimport { SucursalBodegaUpSert } from './SucursalBodegaUpSert';\r\nconst menuId = 34;\r\nconst menuIdMunicipio = 10;\r\nexport const SucursalBodegaListar = ({nombre,sucursalId,listDeptos,setVerBodegas}) => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [listado, setListado] = useState([]);\r\n    const initData = {\r\n        bodegaId: '',\r\n        sucursalId,\r\n        nombre: '',\r\n        descripcion: '',\r\n        municipioId: '',\r\n        puntoReferencia: '',\r\n        direccion: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdMunicipio);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetListado = async () => {\r\n        if (accesos.find(acceso => acceso.accesoId === 3 && acceso.menuId === menuId)) {\r\n            limpiarEstiloTabla(\"#tableBodega\");\r\n            setLoading(true);\r\n            let response = await callApi(`bodega?sucursalId=${sucursalId}&estadoId=1;2`);\r\n            if (response) {\r\n                setListado(response);\r\n            }\r\n            asignarEstiloTabla(\"#tableBodega\");\r\n\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { sucursalId,bodegaId, nombre, descripcion, municipioId, puntoReferencia, direccion, estadoId, Municipio: { departamentoId } } = listado.find(item => item.bodegaId === id);\r\n        setdataInicial({\r\n            bodegaId,\r\n            sucursalId,\r\n            nombre,\r\n            descripcion,\r\n            municipioId,\r\n            departamentoId,\r\n            puntoReferencia,\r\n            direccion,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`bodega/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    let listActual = listado.filter(item => item.bodegaId !== id);\r\n                    setListado(listActual);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, [state?.accesos]);\r\n\r\n    useEffect(() => {\r\n        GetListado();\r\n    }, [accesos]);\r\n    return (\r\n        accesos.length > 0 &&\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\"><button className=\"btn btn-success btn-sm\" type=\"button\" onClick={()=>setVerBodegas(false)}>Regresar</button>BODEGAS DE LA SUCURSAL {nombre}</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.accesoId === 1 && acceso.menuId === menuId) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Bodega</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.accesoId === 3 && acceso.menuId === menuId) ?\r\n                                                <Table striped hover responsive bordered id=\"tableBodega\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Codigo</th>\r\n                                                            <th>Nombre</th>\r\n                                                            <th>Descripción</th>\r\n                                                            <th>Departamento</th>\r\n                                                            <th>Municipio</th>\r\n                                                            <th>Dirección</th>\r\n                                                            <th>Punto de Referencia</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.accesoId === 2 && acceso.menuId === menuId) || (acceso.accesoId === 4 && acceso.menuId === menuId)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            listado.map(({ bodegaId, nombre, descripcion, Municipio: { descripcion: desMunicipio, Departamento: { descripcion: desDepto } }, direccion, puntoReferencia, Estado: { descripcion: estado } }) => (\r\n                                                                <tr key={bodegaId}>\r\n                                                                    <td>{bodegaId}</td>\r\n                                                                    <td>{nombre}</td>\r\n                                                                    <td>{descripcion}</td>\r\n                                                                    <td>{desDepto}</td>\r\n                                                                    <td>{desMunicipio}</td>\r\n                                                                    <td>{direccion}</td>\r\n                                                                    <td>{puntoReferencia}</td>\r\n                                                                    <td>{estado}</td>\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.accesoId === 2 && acceso.menuId === menuId) || (acceso.accesoId === 4 && acceso.menuId === menuId)) &&\r\n                                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.accesoId === 2 && acceso.menuId === menuId) &&\r\n                                                                                <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(bodegaId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                            }\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.accesoId === 4 && acceso.menuId === menuId) &&\r\n                                                                                <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(bodegaId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <SucursalBodegaUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} GetListado={GetListado} dataInicial={dataInicial} listDeptos={listDeptos} accesos={accesos} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport { useSelector } from 'react-redux';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { NoAutorizado } from '../base/NoAutorizado';\r\nimport Loading from '../base/Loading';\r\nimport { asignarEstiloTabla, limpiarEstiloTabla } from '../../../helpers/estiloTabla';\r\nimport { SucursalUpSert } from './SucursalUpSert';\r\nimport { SucursalBodegaListar } from './SucursalBodegaListar';\r\nconst menuId = 33;\r\nconst menuIdDepartamento = 9;\r\nconst menuIdMunicipio = 10;\r\nconst menuIdBodega = 34;\r\nexport const SucursalListar = () => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [listado, setListado] = useState([]);\r\n    const [listDeptos, setListDeptos] = useState([]);\r\n    const [verBodegas, setVerBodegas] = useState(false);\r\n    const initData = {\r\n        sucursalId: '',\r\n        nombre: '',\r\n        descripcion: '',\r\n        municipioId: '',\r\n        puntoReferencia: '',\r\n        direccion: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdDepartamento || item.menuId === menuIdMunicipio || item.menuId === menuIdBodega);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetListado = async () => {\r\n        if (accesos.find(acceso => acceso.accesoId === 3 && acceso.menuId === menuId)) {\r\n            limpiarEstiloTabla(\"#tableSucursal\");\r\n            setLoading(true);\r\n            let response = await callApi('sucursal?estadoId=1;2');\r\n            if (response) {\r\n                setListado(response);\r\n            }\r\n            asignarEstiloTabla(\"#tableSucursal\");\r\n\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { sucursalId, nombre, descripcion, municipioId, puntoReferencia, direccion, estadoId, Municipio: { departamentoId } } = listado.find(item => item.sucursalId === id);\r\n        setdataInicial({\r\n            sucursalId,\r\n            nombre,\r\n            descripcion,\r\n            municipioId,\r\n            departamentoId,\r\n            puntoReferencia,\r\n            direccion,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleVerBodegas = (id) => {\r\n        const { sucursalId, nombre, descripcion, municipioId, puntoReferencia, direccion, estadoId, Municipio: { departamentoId } } = listado.find(item => item.sucursalId === id);\r\n        setdataInicial({\r\n            sucursalId,\r\n            nombre,\r\n            descripcion,\r\n            municipioId,\r\n            departamentoId,\r\n            puntoReferencia,\r\n            direccion,\r\n            estadoId\r\n        });\r\n        setVerBodegas(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`sucursal/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    let listActual = listado.filter(item => item.sucursalId !== id);\r\n                    setListado(listActual);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    const GetDepartamentos = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdDepartamento && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('departamento?estadoId=1&include=0');\r\n            if (response) {\r\n                setListDeptos(response);\r\n            }\r\n        } else {\r\n            setListDeptos([{ departamentoId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, [state?.accesos]);\r\n\r\n    useEffect(() => {\r\n        GetListado();\r\n        GetDepartamentos();\r\n    }, [accesos]);\r\n    return (\r\n        accesos.length > 0 &&\r\n        <>{\r\n            !verBodegas ?\r\n                <Aux>\r\n                    <Row className='btn-page'>\r\n                        <Col sm={12}>\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <Card.Title as=\"h5\">Sucursales</Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    {\r\n                                        loading === true ?\r\n                                            <Loading />\r\n                                            : <>\r\n                                                <Row className=\"align-items-center m-l-0\">\r\n                                                    <Col />\r\n                                                    <Col className=\"text-right\">\r\n                                                        {\r\n                                                            accesos.find(acceso => acceso.accesoId === 1 && acceso.menuId === menuId) &&\r\n                                                            <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Sucursal</Button>\r\n                                                        }\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.accesoId === 3 && acceso.menuId === menuId) ?\r\n                                                        <Table striped hover responsive bordered id=\"tableSucursal\">\r\n                                                            <thead>\r\n                                                                <tr>\r\n                                                                    <th>Codigo</th>\r\n                                                                    {\r\n                                                                        accesos.find(i => i.menuId === menuIdBodega && i.accesoId === 3) &&\r\n                                                                        <th>Bodegas</th>\r\n                                                                    }\r\n                                                                    <th>Nombre</th>\r\n                                                                    <th>Descripción</th>\r\n                                                                    <th>Departamento</th>\r\n                                                                    <th>Municipio</th>\r\n                                                                    <th>Dirección</th>\r\n                                                                    <th>Punto de Referencia</th>\r\n                                                                    <th>Estado</th>\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.accesoId === 2 && acceso.menuId === menuId) || (acceso.accesoId === 4 && acceso.menuId === menuId)) &&\r\n                                                                        <th></th>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            </thead>\r\n                                                            <tbody>\r\n                                                                {\r\n                                                                    listado.map(({ sucursalId, nombre, descripcion, Municipio: { descripcion: desMunicipio, Departamento: { descripcion: desDepto } }, direccion, puntoReferencia, Estado: { descripcion: estado } }) => (\r\n                                                                        <tr key={sucursalId}>\r\n                                                                            <td>{sucursalId}</td>\r\n                                                                            {\r\n                                                                                accesos.find(i => i.menuId === menuIdBodega && i.accesoId === 3) &&\r\n                                                                                <td style={{ textAlign: \"center\" }}>\r\n                                                                                    <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleVerBodegas(sucursalId) }}><i className=\"feather icon-list\" /></button>\r\n                                                                                </td>\r\n                                                                            }\r\n                                                                            <td>{nombre}</td>\r\n                                                                            <td>{descripcion}</td>\r\n                                                                            <td>{desDepto}</td>\r\n                                                                            <td>{desMunicipio}</td>\r\n                                                                            <td>{direccion}</td>\r\n                                                                            <td>{puntoReferencia}</td>\r\n                                                                            <td>{estado}</td>\r\n\r\n                                                                            {\r\n                                                                                accesos.find(acceso => (acceso.accesoId === 2 && acceso.menuId === menuId) || (acceso.accesoId === 4 && acceso.menuId === menuId)) &&\r\n                                                                                <td style={{ textAlign: \"center\" }}>\r\n                                                                                    {\r\n                                                                                        accesos.find(acceso => acceso.accesoId === 2 && acceso.menuId === menuId) &&\r\n                                                                                        <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(sucursalId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                    }\r\n                                                                                    {\r\n                                                                                        accesos.find(acceso => acceso.accesoId === 4 && acceso.menuId === menuId) &&\r\n                                                                                        <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(sucursalId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                    }\r\n                                                                                </td>\r\n                                                                            }\r\n                                                                        </tr>\r\n                                                                    ))\r\n                                                                }\r\n                                                            </tbody>\r\n                                                        </Table>\r\n                                                        : <NoAutorizado />\r\n                                                }\r\n                                            </>\r\n                                    }\r\n                                    {\r\n                                        abrirModal === true &&\r\n                                        <SucursalUpSert\r\n                                            abrirModal={abrirModal}\r\n                                            setAbrirModal={setAbrirModal}\r\n                                            GetListado={GetListado}\r\n                                            dataInicial={dataInicial}\r\n                                            listDeptos={listDeptos}\r\n                                            accesos={accesos} />\r\n                                    }\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Aux>\r\n                : <SucursalBodegaListar\r\n                    {...dataInicial}\r\n                    listDeptos={listDeptos}\r\n                    setVerBodegas={setVerBodegas} />\r\n        }\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { SucursalListar } from '../../components/contable/SucursalListar';\r\n\r\nconst SucursalPage = () => {\r\n    return (\r\n        <SucursalListar/>\r\n    )\r\n}\r\n\r\nexport default SucursalPage;\r\n","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Información!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignación de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n","import $ from 'jquery';\r\n$.DataTable = require('datatables.net-bs');\r\nrequire('datatables.net-responsive-bs');\r\n\r\nexport const asignarEstiloTabla = (selector, filas = 10) => {\r\n    setTimeout(() => {\r\n        $(selector).DataTable().destroy();\r\n        $(selector).DataTable({\r\n            searching: true,\r\n            bLengthChange: false,\r\n            bAutoWidth: false,\r\n            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"Todos\"]],\r\n            displayLength: filas,\r\n            language: {\r\n                processing: \"Cargando información\",\r\n                search: \"Filtrar por:\",\r\n                lengthMenu: \"Mostrar _MENU_ filas\",\r\n                info: \"Vizualización  _END_ de _TOTAL_ filas\",\r\n                infoEmpty: \"Vizualización del elemento 0 a 0 de 0 filas\",\r\n                infoFiltered: \"(Filtrado de _MAX_ filas en total)\",\r\n                infoPostFix: \"\",\r\n                loadingRecords: \"Cargando...\",\r\n                zeroRecords: \"No se logró encontrar ninguna coincidencia\",\r\n                emptyTable: \"No existen registros\",\r\n                paginate: {\r\n                    first: \"Primera\",\r\n                    previous: \"Anterior\",\r\n                    next: \"Siguiente\",\r\n                    last: \"Ultima\"\r\n                },\r\n                aria: {\r\n                    sortAscending: \": active para ordenar la columna en orden ascendente\",\r\n                    sortDescending: \": active para ordenar la columna en orden descendente\"\r\n                }\r\n            }\r\n        });\r\n    }, 0);\r\n}\r\nexport const limpiarEstiloTabla = (selector) => {\r\n    $(selector).DataTable().destroy();\r\n}"],"sourceRoot":""}