{"version":3,"sources":["logo.svg","hooks/useForm.js","components/Menu.js","helpers/Notificacion.js","helpers/conectorApi.js","components/doctor/DoctorUpsert.js","components/doctor/ListDoctor.js","components/paciente/PacienteUpsert.js","components/paciente/ListPaciente.js","components/consulta/ConsultaDetalle.js","components/consulta/ConsultaInsert.js","components/consulta/Listconsulta.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","toUpperCase","Menu","Nav","activeKey","Item","Link","href","alert_exitoso","mensaje","notice","PNotify","success","title","text","hide","icon","delay","animation","mouseReset","modules","Buttons","closer","sticker","on","close","alert_error","error","alert_warning","BASE_URL","callApi","endpoint","a","options","headers","Accept","url","fetch","response","json","result","status","body","code","data","DoctorUpsert","dataInicial","abrirModal","setAbrirModal","handleOnChange","NuevoRegistro","method","JSON","stringify","ActualizarRegistro","doctorId","Upsert","e","nombre","direccion","telefono","String","trim","length","Modal","show","onHide","size","Header","closeButton","Title","as","Body","className","htmlFor","id","placeholder","autoComplete","type","onChange","rows","Footer","onClick","ListDoctor","list","setList","initData","setdataInicial","GetDoctores","useEffect","Row","Col","sm","Card","Button","variant","Table","striped","bordered","hover","map","fecha_crea","find","item","handleEditar","PacienteUpsert","pacienteId","ListPaciente","GetPacientes","ConsultaDetalle","infoDetalle","listMedicamento","setListMedicamento","listEnfermedades","setListEnfermedades","GetDetalle","consultaId","enfermedades","medicamentos","Paciente","index","serialId","descripcion","Enfermedad","Medicamento","ConsultaInsert","doctores","pacientes","comboEnfermedad","setComboEnfermedad","comboMedicamento","setComboMedicamento","listMedicamentos","setListMedicamentos","listEnfermedad","itemEnfermedad","i","Number","enfermedadId","enfermedadesActuales","push","nuevosItemsCombo","filter","itemMedicamento","medicamentoId","medicamentosActuales","itemsCombo","itemsEnfermedad","handleEliminarEnfermedad","itemsMedicamento","handleEliminarMedicamento","Listconsulta","listDoctores","setListDoctores","setListEnfermedad","listPacientes","setListPacientes","abrirModalDetalle","setAbrirModalDetalle","setInfoDetalle","GetMedicamentos","GetEnfermedad","GetConsultas","nombreDoctor","Doctor","nombrePaciente","handleDetalle","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0c11d0b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from \"react\"\r\n\r\nexport const useForm = (initialState = {}) => {\r\n    const [values, setValues] = useState(initialState);\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    }\r\n    const handleInputChange = ({ target }) => {\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value.toUpperCase()\r\n        });\r\n    }\r\n    return [values, handleInputChange,reset,setValues];\r\n}","import React from 'react'\r\nimport { Nav } from 'react-bootstrap'\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <Nav activeKey=\"/\">\r\n             <Nav.Item>\r\n                <Nav.Link href=\"/\">Consulta</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link href=\"/doctores\">Doctores</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n            <Nav.Link href=\"/pacientes\">Pacientes</Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n    )\r\n}\r\n\r\nexport default Menu\r\n","import PNotify from \"pnotify/dist/es/PNotify\";\r\nexport const alert_exitoso = (mensaje) => {\r\n    const notice = PNotify.success({\r\n        title: 'Información!',\r\n        text: mensaje,\r\n        hide: true,\r\n        icon: true,\r\n        delay: 2000,\r\n        animation: 'fade',\r\n        mouseReset: true,\r\n        modules: {\r\n            Buttons: {\r\n                closer: true,\r\n                sticker: true\r\n            }\r\n        }\r\n    });\r\n    notice.on('click', function () {\r\n        notice.close();\r\n    });\r\n}\r\n\r\nexport const alert_error = (mensaje) => {\r\n    const notice = PNotify.error({\r\n        title: 'Error!',\r\n        text: mensaje,\r\n        hide: true,\r\n        icon: true,\r\n        delay: 2000,\r\n        animation: 'fade',\r\n        mouseReset: true,\r\n        modules: {\r\n            Buttons: {\r\n                closer: true,\r\n                sticker: true\r\n            }\r\n        }\r\n    });\r\n    notice.on('click', function () {\r\n        notice.close();\r\n    });\r\n}\r\n\r\nexport const alert_info = (mensaje) => {\r\n    const notice = PNotify.info({\r\n        title: 'Información!',\r\n        text: mensaje,\r\n        hide: true,\r\n        icon: true,\r\n        delay: 2000,\r\n        animation: 'fade',\r\n        mouseReset: true,\r\n        modules: {\r\n            Buttons: {\r\n                closer: true,\r\n                sticker: true\r\n            }\r\n        }\r\n    });\r\n    notice.on('click', function () {\r\n        notice.close();\r\n    });\r\n}\r\n\r\nexport const alert_warning = (mensaje) => {\r\n    const notice = PNotify.notice({\r\n        title: 'Advertencia!',\r\n        text: mensaje,\r\n        hide: true,\r\n        icon: true,\r\n        delay: 2000,\r\n        animation: 'fade',\r\n        mouseReset: true,\r\n        modules: {\r\n            Buttons: {\r\n                closer: true,\r\n                sticker: true\r\n            }\r\n        }\r\n    });\r\n    notice.on('click', function () {\r\n        notice.close();\r\n    });\r\n}\r\n\r\n","\r\nimport { alert_error, alert_warning } from './Notificacion';\r\nconst BASE_URL = \"http://apiseminario.natalysshop.com/api/\";\r\nconst callApi = async (endpoint, options = {}) => {\r\n    try {\r\n\r\n        options.headers = {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n        };\r\n\r\n        const url = BASE_URL + endpoint;\r\n        const response = await fetch(url, options);\r\n        const result = await response.json();\r\n        if (result) {\r\n            const { error, status, body } = result;\r\n            if (error === true) {\r\n                if (body === \"Validation error\") {\r\n                    alert_error(\"Ocurrió un error de validación\");\r\n                    return false;\r\n                } else {\r\n                    alert_error(\"Ocurrió un error al realizar la petición\");\r\n                    return false;\r\n                }\r\n            } else {\r\n                if (body) {\r\n                    const { code, data } = body;\r\n                    if (code === 0) {\r\n                        alert_warning(data);\r\n                        return false;\r\n                    } else if (code === 1) {\r\n                        return data;\r\n                    } else {\r\n                        alert_error(data);\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    alert_error(\"El servicio no retorno información\");\r\n                    return false;\r\n                }\r\n            }\r\n        } else {\r\n            alert_error(\"Ocurrió un error al realizar la acción\");\r\n            return false;\r\n        }\r\n\r\n    } catch (mensajeError) {\r\n        alert_error(\"Ocurrió un error en el conector, por favor comuniquese con Soporte\");\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default callApi;","import React from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap'\r\nimport callApi from '../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const DoctorUpsert = ({ dataInicial, abrirModal, setAbrirModal }) => {\r\n    const [values, handleOnChange, , setValues] = useForm(dataInicial);\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('doctor', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Doctor registrado exitosamente\");\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi(`doctor/${dataInicial.doctorId}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n        }\r\n    }\r\n\r\n    const Upsert = async (e) => {\r\n        let { nombre, direccion, telefono } = values;\r\n        if (String(nombre).trim().length > 0) {\r\n            if (String(direccion).trim().length > 0) {\r\n                if (String(telefono).trim().length > 0) {\r\n                    if (dataInicial.doctorId > 0) {\r\n                        await ActualizarRegistro();\r\n                    } else {\r\n                        await NuevoRegistro();\r\n                    }\r\n                    setAbrirModal(false);\r\n                } else {\r\n                    alert_warning(\"Debe de ingresar el telefono direccion del doctor\");\r\n                }\r\n\r\n            } else {\r\n                alert_warning(\"Debe de ingresar la dirección del doctor\");\r\n            }\r\n\r\n        } else {\r\n            alert_warning(\"Debe de ingresar el nombre del doctor\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h5\">{dataInicial.doctorId > 0 ? 'Actualizar Datos de Doctor' : 'Nuevo Doctor'}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"descripcion\">Nombre</label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        name=\"nombre\"\r\n                        id=\"nombre\"\r\n                        placeholder=\"Nombre\"\r\n                        autoComplete=\"off\"\r\n                        type=\"text\"\r\n                        value={values.nombre}\r\n                        onChange={handleOnChange}\r\n                    />\r\n                </div>\r\n                </div>\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"descripcion\">Dirección</label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        name=\"direccion\"\r\n                        id=\"direccion\"\r\n                        placeholder=\"Dirección\"\r\n                        autoComplete=\"off\"\r\n                        type=\"text\"\r\n                        value={values.direccion}\r\n                        rows=\"5\"\r\n                        onChange={handleOnChange}\r\n                    />\r\n                </div>\r\n                </div>\r\n                <div className=\"form-row\">\r\n                    <div className=\"form-group col-md-12\">\r\n                        <label className=\"form-label\" htmlFor=\"descripcion\">Teléfono</label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            name=\"telefono\"\r\n                            id=\"telefono\"\r\n                            placeholder=\"Telefono\"\r\n                            autoComplete=\"off\"\r\n                            type=\"text\"\r\n                            value={values.telefono}\r\n                            onChange={handleOnChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div className=\"col-sm-4\"></div>\r\n                <div className=\"col-sm-2\">\r\n                    <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <button type=\"button\" onClick={() => { Upsert() }} className=\"btn btn-success\"> {dataInicial.doctorId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Col, Row, Table, Button, Card } from 'react-bootstrap'\r\nimport callApi from '../../helpers/conectorApi';\r\nimport { DoctorUpsert } from './DoctorUpsert';\r\n\r\nexport const ListDoctor = () => {\r\n    const [list, setList] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const initData = {\r\n        doctorId: '',\r\n        nombre: '',\r\n        direccion:'',\r\n        telefono: '',\r\n    };\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const GetDoctores = async () => {\r\n        let response = await callApi('doctor');\r\n        setList(response);\r\n    }\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n\r\n    const handleEditar = (id) => {\r\n        const { doctorId,nombre,direccion,telefono } = list.find(item => item.doctorId === id);\r\n        setdataInicial({\r\n            doctorId,\r\n            nombre,\r\n            direccion,\r\n            telefono\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    useEffect(() => {\r\n        GetDoctores();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetDoctores();\r\n    }, [abrirModal]);\r\n    return (\r\n        <>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Doctores</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row className=\"align-items-center m-l-0\">\r\n                                <Col>\r\n                                    <Button variant=\"primary\" onClick={handleOpenModal}>Nuevo Doctor</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <hr></hr>\r\n                            <Table striped bordered hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Código</th>\r\n                                        <th>Nombre</th>\r\n                                        <th>Direccion</th>\r\n                                        <th>Teléfono</th>\r\n                                        <th>Fecha de Ingreso</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        list.map(({ doctorId, nombre, direccion, telefono, fecha_crea }) => {\r\n                                            return (\r\n                                                <tr key={`doctor_id${doctorId}`}>\r\n                                                    <td>{doctorId}</td>\r\n                                                    <td>{nombre}</td>\r\n                                                    <td>{direccion}</td>\r\n                                                    <td>{telefono}</td>\r\n                                                    <td>{fecha_crea}</td>\r\n                                                    <td>\r\n                                                    <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => {handleEditar(doctorId)}}>Edit<i className=\"feather icon-edit\" /></button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        })\r\n                                    }\r\n\r\n                                </tbody>\r\n                            </Table>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                abrirModal === true && <DoctorUpsert abrirModal={abrirModal} setAbrirModal={setAbrirModal} dataInicial={dataInicial} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap'\r\nimport callApi from '../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const PacienteUpsert = ({ dataInicial, abrirModal, setAbrirModal }) => {\r\n    const [values, handleOnChange, , setValues] = useForm(dataInicial);\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('paciente', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Paciente registrado exitosamente\");\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi(`paciente/${dataInicial.pacienteId}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n        }\r\n    }\r\n\r\n    const Upsert = async (e) => {\r\n        let { nombre, direccion, telefono } = values;\r\n        if (String(nombre).trim().length > 0) {\r\n            if (String(direccion).trim().length > 0) {\r\n                if (String(telefono).trim().length > 0) {\r\n                    if (dataInicial.pacienteId > 0) {\r\n                        await ActualizarRegistro();\r\n                    } else {\r\n                        await NuevoRegistro();\r\n                    }\r\n                    setAbrirModal(false);\r\n                } else {\r\n                    alert_warning(\"Debe de ingresar el telefono direccion del paciente\");\r\n                }\r\n\r\n            } else {\r\n                alert_warning(\"Debe de ingresar la dirección del paciente\");\r\n            }\r\n\r\n        } else {\r\n            alert_warning(\"Debe de ingresar el nombre del paciente\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h5\">{dataInicial.pacienteId > 0 ? 'Actualizar Datos de Paciente' : 'Nuevo Paciente'}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"descripcion\">Nombre</label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        name=\"nombre\"\r\n                        id=\"nombre\"\r\n                        placeholder=\"Nombre\"\r\n                        autoComplete=\"off\"\r\n                        type=\"text\"\r\n                        value={values.nombre}\r\n                        onChange={handleOnChange}\r\n                    />\r\n                </div>\r\n                </div>\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"descripcion\">Dirección</label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        name=\"direccion\"\r\n                        id=\"direccion\"\r\n                        placeholder=\"Dirección\"\r\n                        autoComplete=\"off\"\r\n                        type=\"text\"\r\n                        value={values.direccion}\r\n                        rows=\"5\"\r\n                        onChange={handleOnChange}\r\n                    />\r\n                </div>\r\n                </div>\r\n                <div className=\"form-row\">\r\n                    <div className=\"form-group col-md-12\">\r\n                        <label className=\"form-label\" htmlFor=\"descripcion\">Teléfono</label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            name=\"telefono\"\r\n                            id=\"telefono\"\r\n                            placeholder=\"Telefono\"\r\n                            autoComplete=\"off\"\r\n                            type=\"text\"\r\n                            value={values.telefono}\r\n                            onChange={handleOnChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div className=\"col-sm-4\"></div>\r\n                <div className=\"col-sm-2\">\r\n                    <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <button type=\"button\" onClick={() => { Upsert() }} className=\"btn btn-success\"> {dataInicial.pacienteId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Col, Row, Table, Button, Card } from 'react-bootstrap'\r\nimport callApi from '../../helpers/conectorApi';\r\nimport { PacienteUpsert } from './PacienteUpsert';\r\n\r\nexport const ListPaciente = () => {\r\n    const [list, setList] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const initData = {\r\n        pacienteId: '',\r\n        nombre: '',\r\n        direccion: '',\r\n        telefono: '',\r\n    };\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const GetPacientes = async () => {\r\n        let response = await callApi('paciente');\r\n        setList(response);\r\n    }\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n\r\n    const handleEditar = (id) => {\r\n        const { pacienteId, nombre, direccion, telefono } = list.find(item => item.pacienteId === id);\r\n        setdataInicial({\r\n            pacienteId,\r\n            nombre,\r\n            direccion,\r\n            telefono\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    useEffect(() => {\r\n        GetPacientes();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetPacientes();\r\n    }, [abrirModal]);\r\n    return (\r\n        <>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Pacientes</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row className=\"align-items-center m-l-0\">\r\n                                <Col>\r\n                                    <Button variant=\"primary\" onClick={handleOpenModal}>Nuevo Paciente</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <hr></hr>\r\n                            <Table striped bordered hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Código</th>\r\n                                        <th>Nombre</th>\r\n                                        <th>Direccion</th>\r\n                                        <th>Teléfono</th>\r\n                                        <th>Fecha de Ingreso</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        list.map(({ pacienteId, nombre, direccion, telefono, fecha_crea }) => {\r\n                                            return (\r\n                                                <tr key={`doctor_id${pacienteId}`}>\r\n                                                    <td>{pacienteId}</td>\r\n                                                    <td>{nombre}</td>\r\n                                                    <td>{direccion}</td>\r\n                                                    <td>{telefono}</td>\r\n                                                    <td>{fecha_crea}</td>\r\n                                                    <td>\r\n                                                        <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(pacienteId) }}>Edit<i className=\"feather icon-edit\" /></button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        })\r\n                                    }\r\n\r\n                                </tbody>\r\n                            </Table>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                abrirModal === true && <PacienteUpsert abrirModal={abrirModal} setAbrirModal={setAbrirModal} dataInicial={dataInicial} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Col, Form, Modal, Table } from 'react-bootstrap'\r\nimport callApi from '../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const ConsultaDetalle = ({ infoDetalle, abrirModal, setAbrirModal }) => {\r\n    const [listMedicamento, setListMedicamento] = useState([]);\r\n    const [listEnfermedades, setListEnfermedades] = useState([]);\r\n    const GetDetalle = async () => {\r\n        let response = await callApi(`consulta/detalle/${infoDetalle.consultaId}`);\r\n        if (response) {\r\n            if (response?.enfermedades) {\r\n                setListEnfermedades(response.enfermedades);\r\n            }\r\n            if (response?.medicamentos) {\r\n                setListMedicamento(response.medicamentos);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        GetDetalle();\r\n    }, []);\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h5\">DETALLE DE CONSULTA</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h4>Paciente:{infoDetalle.Paciente?.nombre}</h4>\r\n                <hr></hr>\r\n                <h3>Enfermedades</h3>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Descripcion</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            listEnfermedades.map(({ serialId, Enfermedad: { descripcion } }, index) => {\r\n                                return (\r\n                                    <tr key={`enfermedadId_${serialId}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{descripcion}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </Table>\r\n                <hr></hr>\r\n                <h3>Medicamentos</h3>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Descripcion</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            listMedicamento.map(({ serialId, Medicamento: { descripcion } }, index) => {\r\n                                return (\r\n                                    <tr key={`medicamentoId_${serialId}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{descripcion}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </Table>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div className=\"col-sm-4\"></div>\r\n                <div className=\"col-sm-2\">\r\n                    <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Col, Form, Modal, Table } from 'react-bootstrap'\r\nimport callApi from '../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const ConsultaInsert = ({ abrirModal, setAbrirModal, doctores, pacientes, enfermedades, medicamentos }) => {\r\n    const [values, handleOnChange, , setValues] = useForm({\r\n        doctorId: '',\r\n        pacienteId: ''\r\n    });\r\n    const [comboEnfermedad, setComboEnfermedad] = useState(enfermedades);\r\n    const [comboMedicamento, setComboMedicamento] = useState(medicamentos);\r\n    const [listEnfermedades, setListEnfermedades] = useState([]);\r\n    const [listMedicamentos, setListMedicamentos] = useState([]);\r\n    const NuevoRegistro = async (data) => {\r\n        let response = await callApi('consulta', {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Consulta Registrada Exitosamente\");\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n\r\n    const Upsert = async (e) => {\r\n        let { doctorId, pacienteId } = values;\r\n        if (String(doctorId).trim().length > 0) {\r\n            if (String(pacienteId).trim().length > 0) {\r\n                \r\n                let data={...values,listEnfermedad:listEnfermedades,listMedicamento:listMedicamentos};\r\n                NuevoRegistro(data);\r\n            } else {\r\n                alert_warning(\"Debe de seleccionar un paciente\");\r\n            }\r\n\r\n        } else {\r\n            alert_warning(\"Debe de seleccionar un doctor\");\r\n        }\r\n    }\r\n    const handleEnfermedad=({target})=>{\r\n        let id=target.value;\r\n        if(String(id).trim().length>0){\r\n            let itemEnfermedad=enfermedades.find(i=>Number(i.enfermedadId)===Number(id));\r\n            let enfermedadesActuales=listEnfermedades || [];\r\n            enfermedadesActuales.push(itemEnfermedad);\r\n            setListEnfermedades(enfermedadesActuales);\r\n\r\n            let nuevosItemsCombo=comboEnfermedad.filter(i=>Number(i.enfermedadId)!==Number(id));\r\n            setComboEnfermedad(nuevosItemsCombo);\r\n        }\r\n    }\r\n\r\n    const handleMedicamento=({target})=>{\r\n        let id=target.value;\r\n        if(String(id).trim().length>0){\r\n            let itemMedicamento=medicamentos.find(i=>Number(i.medicamentoId)===Number(id));\r\n            let medicamentosActuales=listMedicamentos || [];\r\n            medicamentosActuales.push(itemMedicamento);\r\n            setListMedicamentos(medicamentosActuales);\r\n\r\n            let nuevosItemsCombo=comboMedicamento.filter(i=>Number(i.medicamentoId)!==Number(id));\r\n            setComboMedicamento(nuevosItemsCombo);\r\n        }\r\n    }\r\n\r\n\r\n    const handleEliminarEnfermedad = (id) => {\r\n        let itemsCombo=comboEnfermedad;\r\n        let item=enfermedades.find(i=>Number(i.enfermedadId)===Number(id));\r\n        itemsCombo.push(item);\r\n        setComboEnfermedad(itemsCombo);\r\n        \r\n        let itemsEnfermedad=listEnfermedades.filter(i=>Number(i.enfermedadId)!==Number(id));\r\n        setListEnfermedades(itemsEnfermedad);\r\n    }\r\n\r\n    const handleEliminarMedicamento = (id) => {\r\n        let itemsCombo=comboMedicamento;\r\n        let item=medicamentos.find(i=>Number(i.medicamentoId)===Number(id));\r\n        itemsCombo.push(item);\r\n        setComboMedicamento(itemsCombo);\r\n        \r\n        let itemsMedicamento=listMedicamentos.filter(i=>Number(i.medicamentoId)!==Number(id));\r\n        setListMedicamentos(itemsMedicamento);\r\n    }\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h5\">REGISTRAR CONSULTA</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"doctorId\">Doctor</label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        name=\"doctorId\"\r\n                        id=\"doctorId\"\r\n                        value={values.doctorId}\r\n                        onChange={handleOnChange}>\r\n                        <option value=\"\">Seleccione un Doctor</option>\r\n                        {\r\n                            doctores.map(({ doctorId, nombre }) => {\r\n                                return (\r\n                                    <option key={`item_doctor${doctorId}`} value={doctorId}>{nombre}</option>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </select>\r\n                </div>\r\n                </div>\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"pacienteId\">Paciente</label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        name=\"pacienteId\"\r\n                        id=\"pacienteId\"\r\n                        value={values.pacienteId}\r\n                        onChange={handleOnChange}>\r\n                        <option value=\"\">Seleccione un Paciente</option>\r\n                        {\r\n                            pacientes.map(({ pacienteId, nombre }) => {\r\n                                return (\r\n                                    <option key={`item_paciente${pacienteId}`} value={pacienteId}>{nombre}</option>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </select>\r\n                </div>\r\n                </div>\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"enfermedadId\">Enfermedad</label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        name=\"enfermedadId\"\r\n                        id=\"enfermedadId\"\r\n                        value={''}\r\n                        onChange={handleEnfermedad}>\r\n                        <option value=\"\">Seleccione una Enfermedad</option>\r\n                        {\r\n                            comboEnfermedad.map(({ enfermedadId, descripcion }) => {\r\n                                return (\r\n                                    <option key={`enfermedadId${enfermedadId}`} value={enfermedadId}>{descripcion}</option>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </select>\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"form-row\"><div className=\"form-group col-md-12\">\r\n                    <label className=\"form-label\" htmlFor=\"medicamentoId\">Medicamento</label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        name=\"medicamentoId\"\r\n                        id=\"medicamentoId\"\r\n                        value={''}\r\n                        onChange={handleMedicamento}>\r\n                        <option value=\"\">Seleccione una Enfermedad</option>\r\n                        {\r\n                            comboMedicamento.map(({ medicamentoId, descripcion }) => {\r\n                                return (\r\n                                    <option key={`medicamentoId${medicamentoId}`} value={medicamentoId}>{descripcion}</option>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </select>\r\n                </div>\r\n                </div>\r\n\r\n\r\n                {\r\n                    listEnfermedades.length > 0 &&\r\n                    <div className=\"form-row\">\r\n                        <hr></hr>\r\n                        <h5>Enfermedades</h5>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Descripcion</th>\r\n                                    <th>Eliminar</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    listEnfermedades.map(({ enfermedadId, descripcion }, index) => {\r\n                                        return (\r\n                                            <tr key={`enfermedadId_${enfermedadId}`}>\r\n                                                <td>{index + 1}</td>\r\n                                                <td>{descripcion}</td>\r\n                                                <td><button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEliminarEnfermedad(enfermedadId) }}>Eliminar<i className=\"feather icon-edit\" /></button></td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                }\r\n                {\r\n                    listMedicamentos.length > 0 &&\r\n                    <div className=\"form-row\">\r\n                        <hr></hr>\r\n                        <h5>Medicamentos</h5>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Descripcion</th>\r\n                                    <th>Eliminar</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    listMedicamentos.map(({ medicamentoId, descripcion }, index) => {\r\n                                        return (\r\n                                            <tr key={`medicamentoId${medicamentoId}`}>\r\n                                                <td>{index + 1}</td>\r\n                                                <td>{descripcion}</td>\r\n                                                <td><button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEliminarMedicamento(medicamentoId) }}>Eliminar<i className=\"feather icon-edit\" /></button></td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div className=\"col-sm-4\"></div>\r\n                <div className=\"col-sm-2\">\r\n                    <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <button type=\"button\" onClick={() => { Upsert() }} className=\"btn btn-success\"> Registrar</button>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Col, Row, Table, Button, Card } from 'react-bootstrap'\r\nimport callApi from '../../helpers/conectorApi';\r\nimport { ConsultaDetalle } from './ConsultaDetalle';\r\nimport { ConsultaInsert } from './ConsultaInsert';\r\n\r\nexport const Listconsulta = () => {\r\n    const [listDoctores, setListDoctores] = useState([]);\r\n    const [listEnfermedad, setListEnfermedad] = useState([]);\r\n    const [listMedicamento, setListMedicamento] = useState([]);\r\n    const [listPacientes, setListPacientes] = useState([]);\r\n    const [list, setList] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [abrirModalDetalle, setAbrirModalDetalle] = useState(false);\r\n    const [infoDetalle, setInfoDetalle] = useState({});\r\n    const initData = {\r\n        doctorId: '',\r\n        nombre: '',\r\n        direccion: '',\r\n        telefono: '',\r\n    };\r\n    const GetDoctores = async () => {\r\n        let response = await callApi('doctor');\r\n        setListDoctores(response);\r\n    }\r\n    const GetMedicamentos = async () => {\r\n        let response = await callApi('medicamento');\r\n        setListMedicamento(response);\r\n    }\r\n    const GetEnfermedad = async () => {\r\n        let response = await callApi('enfermedad');\r\n        setListEnfermedad(response);\r\n    }\r\n    const GetPacientes = async () => {\r\n        let response = await callApi('paciente');\r\n        setListPacientes(response);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const GetConsultas = async () => {\r\n        let response = await callApi('consulta');\r\n        setList(response);\r\n    }\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n\r\n    const handleDetalle = (id) => {\r\n        const item = list.find(item => item.consultaId === id);\r\n        setInfoDetalle(item);\r\n        setAbrirModalDetalle(true);\r\n    }\r\n    useEffect(() => {\r\n        GetConsultas();\r\n        GetDoctores();\r\n        GetPacientes();\r\n        GetMedicamentos();\r\nGetEnfermedad();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetConsultas();\r\n    }, [abrirModal]);\r\n    return (\r\n        <>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Consultas</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row className=\"align-items-center m-l-0\">\r\n                                <Col>\r\n                                    <Button variant=\"primary\" onClick={handleOpenModal}>Nuevo Consulta</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <hr></hr>\r\n                            <Table striped bordered hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Código</th>\r\n                                        <th>Fecha Ingreso</th>\r\n                                        <th>Doctor</th>\r\n                                        <th>Paciente</th>\r\n                                        <th>Detalle</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        list.map(({ consultaId, fecha_crea, Doctor: { nombre: nombreDoctor }, Paciente: { nombre: nombrePaciente } }) => {\r\n                                            return (\r\n                                                <tr key={`consultaId${consultaId}`}>\r\n                                                    <td>{consultaId}</td>\r\n                                                    <td>{fecha_crea}</td>\r\n                                                    <td>{nombreDoctor}</td>\r\n                                                    <td>{nombrePaciente}</td> <td>\r\n                                                        <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleDetalle(consultaId) }}>Detalle<i className=\"feather icon-edit\" /></button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        })\r\n                                    }\r\n\r\n                                </tbody>\r\n                            </Table>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                abrirModal === true && <ConsultaInsert \r\n                    abrirModal={abrirModal} \r\n                    setAbrirModal={setAbrirModal} \r\n                    doctores={listDoctores} \r\n                    pacientes={listPacientes}\r\n                    enfermedades={listEnfermedad}\r\n                    medicamentos={listMedicamento} />\r\n            }\r\n            {\r\n                abrirModalDetalle === true && <ConsultaDetalle setAbrirModal={setAbrirModalDetalle} abrirModal={abrirModalDetalle} infoDetalle={infoDetalle} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Listado from './components/Listado';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Menu from './components/Menu';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { ListDoctor } from './components/doctor/ListDoctor';\nimport { ListPaciente } from './components/paciente/ListPaciente';\nimport { Listconsulta } from './components/consulta/Listconsulta';\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Menu/>\n      <BrowserRouter>\n        <Switch>\n        <Route exact path=\"/\" component={Listconsulta}/>\n        <Route exact path=\"/doctores\" component={ListDoctor}/>\n        <Route exact path=\"/pacientes\" component={ListPaciente}/>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}